"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

import json
from uuid import uuid4

import grpc
from fastapi import APIRouter, Depends, Query, Body
from fastapi import Response
from fastapi.params import Path
from grpc.beta.interfaces import StatusCode
from starlette import status
from starlette.status import (
    HTTP_404_NOT_FOUND,
    HTTP_500_INTERNAL_SERVER_ERROR,
    HTTP_403_FORBIDDEN,
)


import src.port_adapter.AppDi as AppDi
from src.domain_model.OrderService import OrderService
from src.port_adapter.api.rest.grpc.Client import Client
from src.port_adapter.api.rest.grpc.v1.project.subcontractor.category.SubcontractorCategoryClient import (
    SubcontractorCategoryClient,
)
from src.port_adapter.api.rest.helper.RequestIdGenerator import RequestIdGenerator
from src.port_adapter.api.rest.model.response.v1.project.subcontractor.category.SubcontractorCategories import (
    SubcontractorCategories,
)
from src.port_adapter.api.rest.model.response.v1.project.subcontractor.category.SubcontractorCategory import (
    SubcontractorCategoryDescriptor,
)
from src.port_adapter.api.rest.router.v1.identity.auth import CustomHttpBearer
from src.port_adapter.api.rest.router.v1.identity.authz import CustomAuthorization
from src.port_adapter.messaging.common.SimpleProducer import SimpleProducer
from src.port_adapter.messaging.common.model.CommandConstant import CommandConstant
from src.resource.logging.logger import logger
from src.resource.logging.opentelemetry.OpenTelemetry import OpenTelemetry

router = APIRouter()


@router.get(
    path="",
    summary="Get all subcontractor category(s)",
    response_model=SubcontractorCategories,
)
@OpenTelemetry.fastApiTraceOTel
async def getSubcontractorCategories(
    *,
    result_from: int = Query(0, description="Starting offset for fetching data"),
    result_size: int = Query(10, description="Item count to be fetched"),
    orders: str = Query("", description="e.g. id:asc,email:desc"),
    _=Depends(CustomHttpBearer()),
    _1=Depends(CustomAuthorization()),
):
    try:
        client = SubcontractorCategoryClient()
        orderService = AppDi.instance.get(OrderService)
        orders = orderService.orderStringToListOfDict(orders)
        return client.subcontractorCategories(
            resultFrom=result_from, resultSize=result_size, orders=orders
        )
    except grpc.RpcError as e:
        if e.code() == StatusCode.PERMISSION_DENIED:
            return Response(content=str(e), status_code=HTTP_403_FORBIDDEN)
        if e.code() == StatusCode.NOT_FOUND:
            return Response(content=str(e), status_code=HTTP_404_NOT_FOUND)
        else:
            logger.error(
                f"[{getSubcontractorCategories.__module__}.{getSubcontractorCategories.__qualname__}] - error response e: {e}"
            )
            return Response(content=str(e), status_code=HTTP_500_INTERNAL_SERVER_ERROR)
    except Exception as e:
        logger.info(e)


@router.get(
    path="/{subcontractor_category_id}",
    summary="Get subcontractor category by id",
    response_model=SubcontractorCategoryDescriptor,
)
@OpenTelemetry.fastApiTraceOTel
async def getSubcontractorCategoryById(
    *,
    subcontractor_category_id: str = Path(
        ...,
        description="subcontractor category id that is used to fetch subcontractor category data",
    ),
    _=Depends(CustomHttpBearer()),
    _1=Depends(CustomAuthorization()),
):
    """Get a subcontractor category by id"""
    try:
        client = SubcontractorCategoryClient()
        return client.subcontractorCategoryById(id=subcontractor_category_id)
    except grpc.RpcError as e:
        if e.code() == StatusCode.PERMISSION_DENIED:
            return Response(content=str(e), status_code=HTTP_403_FORBIDDEN)
        if e.code() == StatusCode.NOT_FOUND:
            return Response(content=str(e), status_code=HTTP_404_NOT_FOUND)
        else:
            logger.error(
                f"[{getSubcontractorCategoryById.__module__}.{getSubcontractorCategoryById.__qualname__}] - error response e: {e}"
            )
            return Response(content=str(e), status_code=HTTP_500_INTERNAL_SERVER_ERROR)
    except Exception as e:
        logger.info(e)


@router.post(
    "", summary="Create subcontractor category", status_code=status.HTTP_200_OK
)
@OpenTelemetry.fastApiTraceOTel
async def createSubcontractorCategory(
    *,
    _=Depends(CustomHttpBearer()),
    _1=Depends(CustomAuthorization()),
    name: str = Body(..., description="name of subcontractor category", embed=True),
):
    reqId = RequestIdGenerator.generateId()
    producer = AppDi.instance.get(SimpleProducer)
    from src.port_adapter.messaging.common.model.ProjectCommand import ProjectCommand

    client = SubcontractorCategoryClient()
    producer.produce(
        obj=ProjectCommand(
            id=reqId,
            name=CommandConstant.CREATE_SUBCONTRACTOR_CATEGORY.value,
            metadata=json.dumps({"token": Client.token}),
            data=json.dumps(
                {
                    "subcontractor_category_id": client.newId(),
                    "name": name,
                }
            ),
            external=[],
        ),
        schema=ProjectCommand.get_schema(),
    )
    return {"request_id": reqId}


@router.put(
    "/{subcontractor_category_id}",
    summary="Update subcontractor category",
    status_code=status.HTTP_200_OK,
)
@OpenTelemetry.fastApiTraceOTel
async def updateSubcontractorCategory(
    *,
    _=Depends(CustomHttpBearer()),
    _1=Depends(CustomAuthorization()),
    subcontractor_category_id: str = Path(
        ...,
        description="subcontractor category id that is used in order to update the subcontractor category",
    ),
    name: str = Body(..., description="name of subcontractor category", embed=True),
):
    reqId = RequestIdGenerator.generateId()
    producer = AppDi.instance.get(SimpleProducer)
    from src.port_adapter.messaging.common.model.ProjectCommand import ProjectCommand

    producer.produce(
        obj=ProjectCommand(
            id=reqId,
            name=CommandConstant.UPDATE_SUBCONTRACTOR_CATEGORY.value,
            metadata=json.dumps({"token": Client.token}),
            data=json.dumps(
                {
                    "subcontractor_category_id": subcontractor_category_id,
                    "name": name,
                }
            ),
            external=[],
        ),
        schema=ProjectCommand.get_schema(),
    )
    return {"request_id": reqId}


@router.patch(
    "/{subcontractor_category_id}",
    summary="Partial update subcontractor category",
    status_code=status.HTTP_200_OK,
)
@OpenTelemetry.fastApiTraceOTel
async def partialUpdateSubcontractorCategory(
    *,
    _=Depends(CustomHttpBearer()),
    _1=Depends(CustomAuthorization()),
    subcontractor_category_id: str = Path(
        ...,
        description="subcontractor category id that is used in order to update the subcontractor category",
    ),
    name: str = Body(None, description="name of subcontractor category", embed=True),
):
    reqId = RequestIdGenerator.generateId()
    producer = AppDi.instance.get(SimpleProducer)
    from src.port_adapter.messaging.common.model.ProjectCommand import ProjectCommand

    producer.produce(
        obj=ProjectCommand(
            id=reqId,
            name=CommandConstant.UPDATE_SUBCONTRACTOR_CATEGORY.value,
            metadata=json.dumps({"token": Client.token}),
            data=json.dumps(
                {
                    "subcontractor_category_id": subcontractor_category_id,
                    "name": name,
                }
            ),
            external=[],
        ),
        schema=ProjectCommand.get_schema(),
    )
    return {"request_id": reqId}


@router.delete(
    "/{subcontractor_category_id}",
    summary="Delete a subcontractor categories",
    status_code=status.HTTP_200_OK,
)
@OpenTelemetry.fastApiTraceOTel
async def deleteSubcontractorCategory(
    *,
    _=Depends(CustomHttpBearer()),
    _1=Depends(CustomAuthorization()),
    subcontractor_category_id: str = Path(
        ...,
        description="subcontractor category id that is used in order to delete the subcontractor category",
    ),
):
    reqId = RequestIdGenerator.generateId()
    producer = AppDi.instance.get(SimpleProducer)
    from src.port_adapter.messaging.common.model.ProjectCommand import ProjectCommand

    producer.produce(
        obj=ProjectCommand(
            id=reqId,
            name=CommandConstant.DELETE_SUBCONTRACTOR_CATEGORY.value,
            metadata=json.dumps({"token": Client.token}),
            data=json.dumps({"subcontractor_category_id": subcontractor_category_id}),
            external=[],
        ),
        schema=ProjectCommand.get_schema(),
    )
    return {"request_id": reqId}
