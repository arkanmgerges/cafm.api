"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

import json

import grpc
from fastapi import APIRouter, Depends, Query, Body
from fastapi import Response
from fastapi.params import Path
from grpc.beta.interfaces import StatusCode
from starlette import status
from starlette.status import (
    HTTP_404_NOT_FOUND,
    HTTP_500_INTERNAL_SERVER_ERROR,
    HTTP_403_FORBIDDEN,
)

import src.port_adapter.AppDi as AppDi
from src.domain_model.OrderService import OrderService
from src.port_adapter.api.rest.grpc.Client import Client
from src.port_adapter.api.rest.grpc.v1.project.maintenance.standard_procedure.StandardMaintenanceProcedureClient import (
    StandardMaintenanceProcedureClient,
)
from src.port_adapter.api.rest.grpc.v1.project.maintenance.standard_procedure.operation.StandardMaintenanceProcedureOperationClient import \
    StandardMaintenanceProcedureOperationClient
from src.port_adapter.api.rest.grpc.v1.project.maintenance.standard_procedure.operation.parameter.MaintenanceProcedureOperationParameterClient import \
    StandardMaintenanceProcedureOperationParameterClient
from src.port_adapter.api.rest.helper.RequestIdGenerator import RequestIdGenerator
from src.port_adapter.api.rest.model.response.v1.project.maintenance.standard_procedure.StandardMaintenanceProcedure import (
    StandardMaintenanceProcedureDescriptor,
)
from src.port_adapter.api.rest.model.response.v1.project.maintenance.standard_procedure.StandardMaintenanceProcedures import (
    StandardMaintenanceProcedures,
)
from src.port_adapter.api.rest.model.response.v1.project.maintenance.standard_procedure.operation.StandardMaintenanceProcedureOperation import \
    StandardMaintenanceProcedureOperationDescriptor
from src.port_adapter.api.rest.model.response.v1.project.maintenance.standard_procedure.operation.StandardMaintenanceProcedureOperations import \
    StandardMaintenanceProcedureOperations
from src.port_adapter.api.rest.model.response.v1.project.maintenance.standard_procedure.operation.parameter.StandardMaintenanceProcedureOperationParameter import \
    StandardMaintenanceProcedureOperationParameterDescriptor
from src.port_adapter.api.rest.model.response.v1.project.maintenance.standard_procedure.operation.parameter.StandardMaintenanceProcedureOperationParameters import \
    StandardMaintenanceProcedureOperationParameters
from src.port_adapter.api.rest.router.v1.identity.auth import CustomHttpBearer
from src.port_adapter.api.rest.router.v1.identity.authz import CustomAuthorization
from src.port_adapter.api.rest.router.v1.project.maintenance.standard_procedure.StandardMaintenanceProcedureFrequency import \
    StandardMaintenanceProcedureFrequency
from src.port_adapter.api.rest.router.v1.project.maintenance.standard_procedure.StandardMaintenanceProcedureHardSubType import \
    StandardMaintenanceProcedureHardSubType
from src.port_adapter.api.rest.router.v1.project.maintenance.standard_procedure.StandardMaintenanceProcedureOperationType import \
    StandardMaintenanceProcedureOperationType
from src.port_adapter.messaging.common.SimpleProducer import SimpleProducer
from src.port_adapter.messaging.common.model.CommandConstant import CommandConstant
from src.resource.common.DateTimeHelper import DateTimeHelper
from src.resource.logging.logger import logger
from src.resource.logging.opentelemetry.OpenTelemetry import OpenTelemetry

router = APIRouter()




# region GET /by_XXX/{id}
@router.get(
    path="",
    summary="Get all standard maintenance procedure(s)",
    response_model=StandardMaintenanceProcedures,
)
@OpenTelemetry.fastApiTraceOTel
async def getStandardMaintenanceProcedures(
    *,
    result_from: int = Query(0, description="Starting offset for fetching data"),
    result_size: int = Query(10, description="Item count to be fetched"),
    orders: str = Query("", description="e.g. id:asc,email:desc"),
    _=Depends(CustomHttpBearer()),
    __=Depends(CustomAuthorization()),
):
    try:
        client = StandardMaintenanceProcedureClient()
        orderService = AppDi.instance.get(OrderService)
        orders = orderService.orderStringToListOfDict(orders)
        return client.standardMaintenanceProcedures(
            resultFrom=result_from, resultSize=result_size, orders=orders
        )
    except grpc.RpcError as e:
        if e.code() == StatusCode.PERMISSION_DENIED:
            return Response(content=str(e), status_code=HTTP_403_FORBIDDEN)
        if e.code() == StatusCode.NOT_FOUND:
            return Response(content=str(e), status_code=HTTP_404_NOT_FOUND)
        else:
            logger.error(
                f"[{getStandardMaintenanceProcedures.__module__}.{getStandardMaintenanceProcedures.__qualname__}] - error response e: {e}"
            )
            return Response(content=str(e), status_code=HTTP_500_INTERNAL_SERVER_ERROR)
    except Exception as e:
        logger.info(e)


# endregion

# region GET/DELETE /operations/parameters/{standard_maintenance_procedure_operation_parameter_id}
@router.get(
    path="/operations/parameters/{standard_maintenance_procedure_operation_parameter_id}",
    summary="Get standard maintenance procedure operation parameter by id",
    response_model=StandardMaintenanceProcedureOperationParameterDescriptor,
)
@OpenTelemetry.fastApiTraceOTel
async def getStandardMaintenanceProcedureOperationParameterById(
    *,
    standard_maintenance_procedure_operation_parameter_id: str = Path(
        ...,
        description="standard maintenance procedure operation parameter id that is used to fetch standard maintenance procedure operation parameter data",
    ),
    _=Depends(CustomHttpBearer()),
    __=Depends(CustomAuthorization()),
):
    """Get a standard maintenance procedure operation parameter by id"""
    try:
        client = StandardMaintenanceProcedureOperationParameterClient()
        return client.standardMaintenanceProcedureOperationParameterById(
            id=standard_maintenance_procedure_operation_parameter_id
        )
    except grpc.RpcError as e:
        if e.code() == StatusCode.PERMISSION_DENIED:
            return Response(content=str(e), status_code=HTTP_403_FORBIDDEN)
        if e.code() == StatusCode.NOT_FOUND:
            return Response(content=str(e), status_code=HTTP_404_NOT_FOUND)
        else:
            logger.error(
                f"[{getStandardMaintenanceProcedureOperationParameterById.__module__}.{getStandardMaintenanceProcedureOperationParameterById.__qualname__}] - error response e: {e}"
            )
            return Response(content=str(e), status_code=HTTP_500_INTERNAL_SERVER_ERROR)
    except Exception as e:
        logger.info(e)


@router.delete(
    "/operations/parameters/{standard_maintenance_procedure_operation_parameter_id}",
    summary="Delete a standard maintenance procedure operation parameters",
    status_code=status.HTTP_200_OK,
)
@OpenTelemetry.fastApiTraceOTel
async def deleteStandardMaintenanceProcedureOperationParameter(
    *,
    _=Depends(CustomHttpBearer()),
    __=Depends(CustomAuthorization()),
    standard_maintenance_procedure_operation_parameter_id: str = Path(
        ...,
        description="standard maintenance procedure operation parameter id that is used in order to delete the standard maintenance procedure operation parameter",
    ),
):
    reqId = RequestIdGenerator.generateId()

    producer = AppDi.instance.get(SimpleProducer)
    from src.port_adapter.messaging.common.model.ProjectCommand import ProjectCommand

    producer.produce(
        obj=ProjectCommand(
            id=reqId,
            name=CommandConstant.DELETE_MAINTENANCE_PROCEDURE_OPERATION_PARAMETER.value,
            metadata=json.dumps({"token": Client.token}),
            data=json.dumps(
                {
                    "standard_maintenance_procedure_operation_parameter_id": standard_maintenance_procedure_operation_parameter_id
                }
            ),
            external=[],
        ),
        schema=ProjectCommand.get_schema(),
    )
    return {"request_id": reqId}


# endregion

# region GET/POST /operations/{standard_maintenance_procedure_operation_id}/parameters
@router.get(
    path="/operations/{standard_maintenance_procedure_operation_id}/parameters",
    summary="Get all standard maintenance procedure operation parameter by standard maintenance procedure operation id",
    response_model=StandardMaintenanceProcedureOperationParameters,
)
@OpenTelemetry.fastApiTraceOTel
async def getStandardMaintenanceProcedureOperationParametersByStandardMaintenanceProcedureOperationId(
    *,
    standard_maintenance_procedure_operation_id: str = Path(
        ...,
        description="standard maintenance procedure operation id that is used to fetch standard maintenance procedure operation parameter data",
    ),
    result_from: int = Query(0, description="Starting offset for fetching data"),
    result_size: int = Query(10, description="Item count to be fetched"),
    orders: str = Query("", description="e.g. id:asc,email:desc"),
    _=Depends(CustomHttpBearer()),
    __=Depends(CustomAuthorization()),
):
    try:
        client = StandardMaintenanceProcedureOperationParameterClient()
        orderService = AppDi.instance.get(OrderService)
        orders = orderService.orderStringToListOfDict(orders)
        return client.standardMaintenanceProcedureOperationParametersByStandardMaintenanceProcedureOperationId(
            standardMaintenanceProcedureOperationId=standard_maintenance_procedure_operation_id,
            resultFrom=result_from,
            resultSize=result_size,
            orders=orders,
        )
    except grpc.RpcError as e:
        if e.code() == StatusCode.PERMISSION_DENIED:
            return Response(content=str(e), status_code=HTTP_403_FORBIDDEN)
        if e.code() == StatusCode.NOT_FOUND:
            return Response(content=str(e), status_code=HTTP_404_NOT_FOUND)
        else:
            logger.error(
                f"[{getStandardMaintenanceProcedureOperationParametersByStandardMaintenanceProcedureOperationId.__module__}.{getStandardMaintenanceProcedureOperationParametersByStandardMaintenanceProcedureOperationId.__qualname__}] - error response e: {e}"
            )
            return Response(content=str(e), status_code=HTTP_500_INTERNAL_SERVER_ERROR)
    except Exception as e:
        logger.info(e)


@router.post(
    "/operations/{standard_maintenance_procedure_operation_id}/parameters",
    summary="Create standard maintenance procedure operation parameter",
    status_code=status.HTTP_200_OK,
)
@OpenTelemetry.fastApiTraceOTel
async def createStandardMaintenanceProcedureOperationParameter(
    *,
    _=Depends(CustomHttpBearer()),
    __=Depends(CustomAuthorization()),
    standard_maintenance_procedure_operation_id: str = Path(
        ..., description="standard maintenance procedure operation id as a parent id"
    ),
    name: str = Body(
        ..., description="name of standard maintenance procedure operation parameter", embed=True
    ),
    unit_id: str = Body(
        ...,
        description="unit id of standard maintenance procedure operation parameter",
        embed=True,
    ),
    min_value: float = Body(
        ...,
        description="min value of standard maintenance procedure operation parameter",
        embed=True,
    ),
    max_value: float = Body(
        ...,
        description="max value of standard maintenance procedure operation parameter",
        embed=True,
    ),
):
    try:
        min_value = float(min_value)
        max_value = float(max_value)
    except:
        raise ValueError(
            f"Minimum and maximum values must be of type float. min. value: {min_value}, max. value: {max_value}"
        )
    if min_value > max_value:
        raise ValueError("Minimum value must be less or equal than maximum value")

    try:
        client = StandardMaintenanceProcedureOperationClient()
        standardMaintenanceProcedureOperation = client.standardMaintenanceProcedureOperationById(
            id=standard_maintenance_procedure_operation_id
        )

        if (
            standardMaintenanceProcedureOperation.type
            == StandardMaintenanceProcedureOperationType.VISUAL.value
        ):
            raise ValueError(
                "Cannot create parameters for standard maintenance procedure operation of type 'visual'"
            )

    except grpc.RpcError as e:
        if e.code() == StatusCode.PERMISSION_DENIED:
            return Response(content=str(e), status_code=HTTP_403_FORBIDDEN)
        if e.code() == StatusCode.NOT_FOUND:
            return Response(content=str(e), status_code=HTTP_404_NOT_FOUND)
        else:
            logger.error(
                f"[{getStandardMaintenanceProcedureOperationById.__module__}.{getStandardMaintenanceProcedureOperationById.__qualname__}] - error response e: {e}"
            )
            return Response(content=str(e), status_code=HTTP_500_INTERNAL_SERVER_ERROR)

    reqId = RequestIdGenerator.generateId()
    producer = AppDi.instance.get(SimpleProducer)
    from src.port_adapter.messaging.common.model.ProjectCommand import ProjectCommand

    client = StandardMaintenanceProcedureOperationParameterClient()
    producer.produce(
        obj=ProjectCommand(
            id=reqId,
            name=CommandConstant.CREATE_MAINTENANCE_PROCEDURE_OPERATION_PARAMETER.value,
            metadata=json.dumps({"token": Client.token}),
            data=json.dumps(
                {
                    "standard_maintenance_procedure_operation_parameter_id": client.newId(),
                    "name": name,
                    "unit_id": unit_id,
                    "standard_maintenance_procedure_operation_id": standard_maintenance_procedure_operation_id,
                    "min_value": min_value,
                    "max_value": max_value,
                }
            ),
            external=[],
        ),
        schema=ProjectCommand.get_schema(),
    )
    return {"request_id": reqId}


# endregion

# region PUT/PATCH /operations/{standard_maintenance_procedure_operation_id}/parameters/{standard_maintenance_procedure_operation_parameter_id}
@router.put(
    "/operations/{standard_maintenance_procedure_operation_id}/parameters/{standard_maintenance_procedure_operation_parameter_id}",
    summary="Update standard maintenance procedure operation parameter",
    status_code=status.HTTP_200_OK,
)
@OpenTelemetry.fastApiTraceOTel
async def updateStandardMaintenanceProcedureOperationParameter(
    *,
    _=Depends(CustomHttpBearer()),
    __=Depends(CustomAuthorization()),
    standard_maintenance_procedure_operation_id: str = Path(
        ..., description="standard maintenance procedure operation id as a parent id"
    ),
    standard_maintenance_procedure_operation_parameter_id: str = Path(
        ...,
        description="standard maintenance procedure operation parameter id that is used in order to update the standard maintenance procedure operation parameter",
    ),
    name: str = Body(..., description="name of name", embed=True),
    unit_id: str = Body(..., description="unit id of unit id", embed=True),
    min_value: float = Body(..., description="min value of min value", embed=True),
    max_value: float = Body(..., description="max value of max value", embed=True),
):
    try:
        min_value = float(min_value)
        max_value = float(max_value)
    except:
        raise ValueError(
            f"Minimum and maximum values must be of type float. min. value: {min_value}, max. value: {max_value}"
        )
    if min_value > max_value:
        raise ValueError("Minimum value must be less or equal than maximum value")
    reqId = RequestIdGenerator.generateId()

    producer = AppDi.instance.get(SimpleProducer)
    from src.port_adapter.messaging.common.model.ProjectCommand import ProjectCommand

    producer.produce(
        obj=ProjectCommand(
            id=reqId,
            name=CommandConstant.UPDATE_MAINTENANCE_PROCEDURE_OPERATION_PARAMETER.value,
            metadata=json.dumps({"token": Client.token}),
            data=json.dumps(
                {
                    "standard_maintenance_procedure_operation_parameter_id": standard_maintenance_procedure_operation_parameter_id,
                    "name": name,
                    "unit_id": unit_id,
                    "standard_maintenance_procedure_operation_id": standard_maintenance_procedure_operation_id,
                    "min_value": min_value,
                    "max_value": max_value,
                }
            ),
            external=[],
        ),
        schema=ProjectCommand.get_schema(),
    )
    return {"request_id": reqId}


@router.patch(
    "/operations/{standard_maintenance_procedure_operation_id}/parameters/{standard_maintenance_procedure_operation_parameter_id}",
    summary="Partial update standard maintenance procedure operation parameter",
    status_code=status.HTTP_200_OK,
)
@OpenTelemetry.fastApiTraceOTel
async def partialUpdateStandardMaintenanceProcedureOperationParameter(
    *,
    _=Depends(CustomHttpBearer()),
    __=Depends(CustomAuthorization()),
    standard_maintenance_procedure_operation_id: str = Path(
        None, description="standard maintenance procedure operation id as a parent id"
    ),
    standard_maintenance_procedure_operation_parameter_id: str = Path(
        None,
        description="standard maintenance procedure operation parameter id that is used in order to update the standard maintenance procedure operation parameter",
    ),
    name: str = Body(None, description="name of name", embed=True),
    unit_id: str = Body(None, description="unit id of unit id", embed=True),
    min_value: float = Body(None, description="min value of min value", embed=True),
    max_value: float = Body(None, description="max value of max value", embed=True),
):
    reqId = RequestIdGenerator.generateId()

    producer = AppDi.instance.get(SimpleProducer)
    from src.port_adapter.messaging.common.model.ProjectCommand import ProjectCommand

    producer.produce(
        obj=ProjectCommand(
            id=reqId,
            name=CommandConstant.UPDATE_MAINTENANCE_PROCEDURE_OPERATION_PARAMETER.value,
            metadata=json.dumps({"token": Client.token}),
            data=json.dumps(
                {
                    "standard_maintenance_procedure_operation_parameter_id": standard_maintenance_procedure_operation_parameter_id,
                    "name": name,
                    "unit_id": unit_id,
                    "standard_maintenance_procedure_operation_id": standard_maintenance_procedure_operation_id,
                    "min_value": min_value,
                    "max_value": max_value,
                }
            ),
            external=[],
        ),
        schema=ProjectCommand.get_schema(),
    )
    return {"request_id": reqId}


# endregion

# region GET/DELETE /operations/{standard_maintenance_procedure_operation_id}
@router.get(
    path="/operations/{standard_maintenance_procedure_operation_id}",
    summary="Get standard maintenance procedure operation by id",
    response_model=StandardMaintenanceProcedureOperationDescriptor,
)
@OpenTelemetry.fastApiTraceOTel
async def getStandardMaintenanceProcedureOperationById(
    *,
    standard_maintenance_procedure_operation_id: str = Path(
        ...,
        description="standard maintenance procedure operation id that is used to fetch standard maintenance procedure operation data",
    ),
    _=Depends(CustomHttpBearer()),
    __=Depends(CustomAuthorization()),
):
    """Get a standard maintenance procedure operation by id"""
    try:
        client = StandardMaintenanceProcedureOperationClient()
        return client.standardMaintenanceProcedureOperationById(
            id=standard_maintenance_procedure_operation_id
        )
    except grpc.RpcError as e:
        if e.code() == StatusCode.PERMISSION_DENIED:
            return Response(content=str(e), status_code=HTTP_403_FORBIDDEN)
        if e.code() == StatusCode.NOT_FOUND:
            return Response(content=str(e), status_code=HTTP_404_NOT_FOUND)
        else:
            logger.error(
                f"[{getStandardMaintenanceProcedureOperationById.__module__}.{getStandardMaintenanceProcedureOperationById.__qualname__}] - error response e: {e}"
            )
            return Response(content=str(e), status_code=HTTP_500_INTERNAL_SERVER_ERROR)
    except Exception as e:
        logger.info(e)


@router.delete(
    "/operations/{standard_maintenance_procedure_operation_id}",
    summary="Delete a standard maintenance procedure operations",
    status_code=status.HTTP_200_OK,
)
@OpenTelemetry.fastApiTraceOTel
async def deleteStandardMaintenanceProcedureOperation(
    *,
    _=Depends(CustomHttpBearer()),
    __=Depends(CustomAuthorization()),
    standard_maintenance_procedure_operation_id: str = Path(
        ...,
        description="standard maintenance procedure operation id that is used in order to delete the standard maintenance procedure operation",
    ),
):
    reqId = RequestIdGenerator.generateId()
    producer = AppDi.instance.get(SimpleProducer)
    from src.port_adapter.messaging.common.model.ProjectCommand import ProjectCommand

    producer.produce(
        obj=ProjectCommand(
            id=reqId,
            name=CommandConstant.DELETE_MAINTENANCE_PROCEDURE_OPERATION.value,
            metadata=json.dumps({"token": Client.token}),
            data=json.dumps(
                {
                    "standard_maintenance_procedure_operation_id": standard_maintenance_procedure_operation_id
                }
            ),
            external=[],
        ),
        schema=ProjectCommand.get_schema(),
    )
    return {"request_id": reqId}


# endregion













#delme--------------------------------------------------------------------------------------------------------


# region GET/POST/PATCH/DELETE /{standard_maintenance_procedure}
@router.get(
    path="",
    summary="Get all standard maintenance procedure(s)",
    response_model=StandardMaintenanceProcedures,
)
@OpenTelemetry.fastApiTraceOTel
async def getStandardMaintenanceProcedures(
    *,
    result_from: int = Query(0, description="Starting offset for fetching data"),
    result_size: int = Query(10, description="Item count to be fetched"),
    orders: str = Query("", description="e.g. id:asc,email:desc"),
    _=Depends(CustomHttpBearer()),
    __=Depends(CustomAuthorization()),
):
    try:
        client = StandardMaintenanceProcedureClient()
        orderService = AppDi.instance.get(OrderService)
        orders = orderService.orderStringToListOfDict(orders)
        return client.standardMaintenanceProcedures(
            resultFrom=result_from, resultSize=result_size, orders=orders
        )
    except grpc.RpcError as e:
        if e.code() == StatusCode.PERMISSION_DENIED:
            return Response(content=str(e), status_code=HTTP_403_FORBIDDEN)
        if e.code() == StatusCode.NOT_FOUND:
            return Response(content=str(e), status_code=HTTP_404_NOT_FOUND)
        else:
            logger.error(
                f"[{getStandardMaintenanceProcedures.__module__}.{getStandardMaintenanceProcedures.__qualname__}] - error response e: {e}"
            )
            return Response(content=str(e), status_code=HTTP_500_INTERNAL_SERVER_ERROR)
    except Exception as e:
        logger.info(e)


@router.get(
    path="/{standard_maintenance_procedure_id}",
    summary="Get standard maintenance procedure by id",
    response_model=StandardMaintenanceProcedureDescriptor,
)
@OpenTelemetry.fastApiTraceOTel
async def getStandardMaintenanceProcedureById(
    *,
    standard_maintenance_procedure_id: str = Path(
        ...,
        description="standard maintenance procedure id that is used to fetch standard maintenance procedure data",
    ),
    _=Depends(CustomHttpBearer()),
    __=Depends(CustomAuthorization()),
):
    """Get a standard maintenance procedure by id"""
    try:
        client = StandardMaintenanceProcedureClient()
        return client.standardMaintenanceProcedureById(
            id=standard_maintenance_procedure_id
        )
    except grpc.RpcError as e:
        if e.code() == StatusCode.PERMISSION_DENIED:
            return Response(content=str(e), status_code=HTTP_403_FORBIDDEN)
        if e.code() == StatusCode.NOT_FOUND:
            return Response(content=str(e), status_code=HTTP_404_NOT_FOUND)
        else:
            logger.error(
                f"[{getStandardMaintenanceProcedureById.__module__}.{getStandardMaintenanceProcedureById.__qualname__}] - error response e: {e}"
            )
            return Response(content=str(e), status_code=HTTP_500_INTERNAL_SERVER_ERROR)
    except Exception as e:
        logger.info(e)


@router.post(
    "", summary="Create standard maintenance procedure", status_code=status.HTTP_200_OK
)
@OpenTelemetry.fastApiTraceOTel
async def createStandardMaintenanceProcedure(
    *,
    _=Depends(CustomHttpBearer()),
    __=Depends(CustomAuthorization()),
    name: str = Body(
        ..., description="name of standard maintenance procedure", embed=True
    ),
    type: str = Body(
        ..., description="type of standard maintenance procedure", embed=True
    ),
    sub_type: StandardMaintenanceProcedureHardSubType = Body(
        None, description="Sub type for when you select hard for type", embed=True
    ),
    frequency: str = Body(
        ..., description="frequency of standard maintenance procedure", embed=True
    ),
    start_date: int = Body(
        ..., description="start date of standard maintenance procedure", embed=True
    ),
    organization_id: str = Body(
        ..., description="organization id of standard maintenance procedure", embed=True
    ),
    standard_equipment_category_group_id: str = Body(
        ...,
        description="standard_equipment_category_group_id id of standard equipment category group",
        embed=True,
    ),
):
    reqId = RequestIdGenerator.generateId()
    start_date = (
        start_date
        if start_date is not None
        and start_date > DateTimeHelper.intOneYearAfterEpochTimeInSecond()
        else None
    )
    producer = AppDi.instance.get(SimpleProducer)
    from src.port_adapter.messaging.common.model.ProjectCommand import ProjectCommand

    client = StandardMaintenanceProcedureClient()
    producer.produce(
        obj=ProjectCommand(
            id=reqId,
            name=CommandConstant.CREATE_STANDARD_MAINTENANCE_PROCEDURE.value,
            metadata=json.dumps({"token": Client.token}),
            data=json.dumps(
                {
                    "standard_maintenance_procedure_id": client.newId(),
                    "name": name,
                    "type": type,
                    "sub_type": sub_type,
                    "frequency": frequency,
                    "start_date": start_date,
                    "organization_id": organization_id,
                    "standard_equipment_category_group_id": standard_equipment_category_group_id,
                }
            ),
            external=[],
        ),
        schema=ProjectCommand.get_schema(),
    )
    return {"request_id": reqId}


@router.put(
    "/{standard_maintenance_procedure_id}",
    summary="Update standard maintenance procedure",
    status_code=status.HTTP_200_OK,
)
@OpenTelemetry.fastApiTraceOTel
async def updateStandardMaintenanceProcedure(
    *,
    _=Depends(CustomHttpBearer()),
    __=Depends(CustomAuthorization()),
    standard_maintenance_procedure_id: str = Path(
        ...,
        description="standard maintenance procedure id that is used in order to update the standard maintenance procedure",
    ),
    name: str = Body(..., description="name of name", embed=True),
    type: str = Body(..., description="type of type", embed=True),
    sub_type: StandardMaintenanceProcedureHardSubType = Body(
        None, description="Sub type for when you select hard for type", embed=True
    ),
    frequency: StandardMaintenanceProcedureFrequency = Body(
        ..., description="procedure frequency", embed=True
    ),
    start_date: int = Body(..., description="start date of start date", embed=True),
    organization_id: str = Body(
        ..., description="organization id of organization id", embed=True
    ),
    standard_equipment_category_group_id: str = Body(
        ...,
        description="standard_equipment_category_group id of standard_equipment_category_group id",
        embed=True,
    ),
):
    reqId = RequestIdGenerator.generateId()
    start_date = (
        start_date
        if start_date is not None
        and start_date > DateTimeHelper.intOneYearAfterEpochTimeInSecond()
        else None
    )
    producer = AppDi.instance.get(SimpleProducer)
    from src.port_adapter.messaging.common.model.ProjectCommand import ProjectCommand

    producer.produce(
        obj=ProjectCommand(
            id=reqId,
            name=CommandConstant.UPDATE_STANDARD_MAINTENANCE_PROCEDURE.value,
            metadata=json.dumps({"token": Client.token}),
            data=json.dumps(
                {
                    "standard_maintenance_procedure_id": standard_maintenance_procedure_id,
                    "name": name,
                    "type": type,
                    "sub_type": sub_type,
                    "frequency": frequency,
                    "start_date": start_date,
                    "organization_id": organization_id,
                    "standard_equipment_category_group_id": standard_equipment_category_group_id,
                }
            ),
            external=[],
        ),
        schema=ProjectCommand.get_schema(),
    )
    return {"request_id": reqId}


@router.patch(
    "/{standard_maintenance_procedure_id}",
    summary="Partial update standard maintenance procedure",
    status_code=status.HTTP_200_OK,
)
@OpenTelemetry.fastApiTraceOTel
async def partialUpdateStandardMaintenanceProcedure(
    *,
    _=Depends(CustomHttpBearer()),
    __=Depends(CustomAuthorization()),
    standard_maintenance_procedure_id: str = Path(
        ...,
        description="standard maintenance procedure id that is used in order to update the standard maintenance procedure",
    ),
    name: str = Body(None, description="name of name", embed=True),
    type: str = Body(None, description="type of type", embed=True),
    sub_type: StandardMaintenanceProcedureHardSubType = Body(
        None, description="hard subtype", embed=True
    ),    
    frequency: StandardMaintenanceProcedureFrequency = Body(
        None, description="procedure frequency", embed=True
    ),    
    start_date: int = Body(None, description="start date of start date", embed=True),
    organization_id: str = Body(
        None, description="organization id of organization id", embed=True
    ),
    standard_equipment_category_group_id: str = Body(
        None,
        description="standard_equipment_category_group id of standard_equipment_category_group id",
        embed=True,
    ),
):
    reqId = RequestIdGenerator.generateId()
    start_date = (
        start_date
        if start_date is not None
        and start_date > DateTimeHelper.intOneYearAfterEpochTimeInSecond()
        else None
    )
    producer = AppDi.instance.get(SimpleProducer)
    from src.port_adapter.messaging.common.model.ProjectCommand import ProjectCommand

    producer.produce(
        obj=ProjectCommand(
            id=reqId,
            name=CommandConstant.UPDATE_STANDARD_MAINTENANCE_PROCEDURE.value,
            metadata=json.dumps({"token": Client.token}),
            data=json.dumps(
                {
                    "standard_maintenance_procedure_id": standard_maintenance_procedure_id,
                    "name": name,
                    "type": type,
                    "sub_type": sub_type,
                    "frequency": frequency,
                    "start_date": start_date,
                    "organization_id": organization_id,
                    "standard_equipment_category_group_id": standard_equipment_category_group_id,
                }
            ),
            external=[],
        ),
        schema=ProjectCommand.get_schema(),
    )
    return {"request_id": reqId}


@router.delete(
    "/{standard_maintenance_procedure_id}",
    summary="Delete a standard maintenance procedures",
    status_code=status.HTTP_200_OK,
)
@OpenTelemetry.fastApiTraceOTel
async def deleteStandardMaintenanceProcedure(
    *,
    _=Depends(CustomHttpBearer()),
    __=Depends(CustomAuthorization()),
    standard_maintenance_procedure_id: str = Path(
        ...,
        description="standard maintenance procedure id that is used in order to delete the standard maintenance procedure",
    ),
):
    reqId = RequestIdGenerator.generateId()
    producer = AppDi.instance.get(SimpleProducer)
    from src.port_adapter.messaging.common.model.ProjectCommand import ProjectCommand

    producer.produce(
        obj=ProjectCommand(
            id=reqId,
            name=CommandConstant.DELETE_STANDARD_MAINTENANCE_PROCEDURE.value,
            metadata=json.dumps({"token": Client.token}),
            data=json.dumps(
                {"standard_maintenance_procedure_id": standard_maintenance_procedure_id}
            ),
            external=[],
        ),
        schema=ProjectCommand.get_schema(),
    )
    return {"request_id": reqId}
# endregion

# region GET/POST /{standard_maintenance_procedure_id}/operations
@router.get(
    path="/{standard_maintenance_procedure_id}/operations",
    summary="Get all standard maintenance procedure operation by standard maintenance procedure id",
    response_model=StandardMaintenanceProcedureOperations,
)
@OpenTelemetry.fastApiTraceOTel
async def getStandardMaintenanceProcedureOperationsByStandardMaintenanceProcedureId(
    *,
    standard_maintenance_procedure_id: str = Path(
        ...,
        description="standard maintenance procedure id that is used to fetch standard maintenance procedure operation data",
    ),
    result_from: int = Query(0, description="Starting offset for fetching data"),
    result_size: int = Query(10, description="Item count to be fetched"),
    orders: str = Query("", description="e.g. id:asc,email:desc"),
    _=Depends(CustomHttpBearer()),
    __=Depends(CustomAuthorization()),
):
    try:
        client = StandardMaintenanceProcedureOperationClient()
        orderService = AppDi.instance.get(OrderService)
        orders = orderService.orderStringToListOfDict(orders)
        return client.standardMaintenanceProcedureOperationsByStandardMaintenanceProcedureId(
            maintenanceProcedureId=standard_maintenance_procedure_id,
            resultFrom=result_from,
            resultSize=result_size,
            orders=orders,
        )
    except grpc.RpcError as e:
        if e.code() == StatusCode.PERMISSION_DENIED:
            return Response(content=str(e), status_code=HTTP_403_FORBIDDEN)
        if e.code() == StatusCode.NOT_FOUND:
            return Response(content=str(e), status_code=HTTP_404_NOT_FOUND)
        else:
            logger.error(
                f"[{getStandardMaintenanceProcedureOperationsByStandardMaintenanceProcedureId.__module__}.{getStandardMaintenanceProcedureOperationsByStandardMaintenanceProcedureId.__qualname__}] - error response e: {e}"
            )
            return Response(content=str(e), status_code=HTTP_500_INTERNAL_SERVER_ERROR)
    except Exception as e:
        logger.info(e)


@router.post(
    "/{standard_maintenance_procedure_id}/operations",
    summary="Create standard maintenance procedure operation",
    status_code=status.HTTP_200_OK,
)
@OpenTelemetry.fastApiTraceOTel
async def createStandardMaintenanceProcedureOperation(
    *,
    standard_maintenance_procedure_id: str = Path(
        ..., description="standard maintenance procedure id as a parent id"
    ),
    _=Depends(CustomHttpBearer()),
    __=Depends(CustomAuthorization()),
    name: str = Body(
        ..., description="name of standard maintenance procedure operation", embed=True
    ),
    description: str = Body(
        ..., description="description of standard maintenance procedure operation", embed=True
    ),
    type: StandardMaintenanceProcedureOperationType = Body(
        ..., description="type of standard maintenance procedure operation", embed=True
    ),
):
    reqId = RequestIdGenerator.generateId()

    producer = AppDi.instance.get(SimpleProducer)
    from src.port_adapter.messaging.common.model.ProjectCommand import ProjectCommand

    client = StandardMaintenanceProcedureOperationClient()
    producer.produce(
        obj=ProjectCommand(
            id=reqId,
            name=CommandConstant.CREATE_MAINTENANCE_PROCEDURE_OPERATION.value,
            metadata=json.dumps({"token": Client.token}),
            data=json.dumps(
                {
                    "standard_maintenance_procedure_operation_id": client.newId(),
                    "name": name,
                    "description": description,
                    "type": type,
                    "standard_maintenance_procedure_id": standard_maintenance_procedure_id,
                }
            ),
            external=[],
        ),
        schema=ProjectCommand.get_schema(),
    )
    return {"request_id": reqId}


# endregion

# region PUT/PATCH /{standard_maintenance_procedure_id}/operations/{standard_maintenance_procedure_operation_id}


@router.put(
    "/{standard_maintenance_procedure_id}/operations/{standard_maintenance_procedure_operation_id}",
    summary="Update standard maintenance procedure operation",
    status_code=status.HTTP_200_OK,
)
@OpenTelemetry.fastApiTraceOTel
async def updateStandardMaintenanceProcedureOperation(
    *,
    _=Depends(CustomHttpBearer()),
    __=Depends(CustomAuthorization()),
    standard_maintenance_procedure_id: str = Path(
        ..., description="standard maintenance procedure id as a parent id"
    ),
    standard_maintenance_procedure_operation_id: str = Path(
        ...,
        description="standard maintenance procedure operation id that is used in order to update the standard maintenance procedure operation",
    ),
    name: str = Body(..., description="name of name", embed=True),
    description: str = Body(..., description="description of description", embed=True),
    type: StandardMaintenanceProcedureOperationType = Body(
        ..., description="type of type", embed=True
    ),
):
    reqId = RequestIdGenerator.generateId()
    producer = AppDi.instance.get(SimpleProducer)
    from src.port_adapter.messaging.common.model.ProjectCommand import ProjectCommand

    producer.produce(
        obj=ProjectCommand(
            id=reqId,
            name=CommandConstant.UPDATE_MAINTENANCE_PROCEDURE_OPERATION.value,
            metadata=json.dumps({"token": Client.token}),
            data=json.dumps(
                {
                    "standard_maintenance_procedure_operation_id": standard_maintenance_procedure_operation_id,
                    "name": name,
                    "description": description,
                    "type": type,
                    "standard_maintenance_procedure_id": standard_maintenance_procedure_id,
                }
            ),
            external=[],
        ),
        schema=ProjectCommand.get_schema(),
    )
    return {"request_id": reqId}


@router.patch(
    "/{standard_maintenance_procedure_id}/operations/{standard_maintenance_procedure_operation_id}",
    summary="Partial update standard maintenance procedure operation",
    status_code=status.HTTP_200_OK,
)
@OpenTelemetry.fastApiTraceOTel
async def partialUpdateStandardMaintenanceProcedureOperation(
    *,
    _=Depends(CustomHttpBearer()),
    __=Depends(CustomAuthorization()),
    standard_maintenance_procedure_id: str = Path(
        None, description="standard maintenance procedure id as a parent id"
    ),
    standard_maintenance_procedure_operation_id: str = Path(
        None,
        description="standard maintenance procedure operation id that is used in order to update the standard maintenance procedure operation",
    ),
    name: str = Body(None, description="name of name", embed=True),
    description: str = Body(None, description="description of description", embed=True),
    type: StandardMaintenanceProcedureOperationType = Body(
        None, description="type of type", embed=True
    ),
):
    reqId = RequestIdGenerator.generateId()
    producer = AppDi.instance.get(SimpleProducer)
    from src.port_adapter.messaging.common.model.ProjectCommand import ProjectCommand

    producer.produce(
        obj=ProjectCommand(
            id=reqId,
            name=CommandConstant.UPDATE_MAINTENANCE_PROCEDURE_OPERATION.value,
            metadata=json.dumps({"token": Client.token}),
            data=json.dumps(
                {
                    "standard_maintenance_procedure_operation_id": standard_maintenance_procedure_operation_id,
                    "name": name,
                    "description": description,
                    "type": type,
                    "standard_maintenance_procedure_id": standard_maintenance_procedure_id,
                }
            ),
            external=[],
        ),
        schema=ProjectCommand.get_schema(),
    )
    return {"request_id": reqId}


# endregion
