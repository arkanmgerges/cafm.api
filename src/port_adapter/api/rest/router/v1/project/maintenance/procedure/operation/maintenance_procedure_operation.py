"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

import json
from uuid import uuid4

import grpc
from fastapi import APIRouter, Depends, Query, Body
from fastapi import Response
from fastapi.params import Path
from grpc.beta.interfaces import StatusCode
from starlette import status
from starlette.status import HTTP_404_NOT_FOUND, HTTP_500_INTERNAL_SERVER_ERROR, HTTP_403_FORBIDDEN

import src.port_adapter.AppDi as AppDi
from src.domain_model.OrderService import OrderService
from src.port_adapter.api.rest.grpc.Client import Client
from src.port_adapter.api.rest.grpc.v1.project.maintenance.procedure.operation.MaintenanceProcedureOperationClient import MaintenanceProcedureOperationClient
from src.port_adapter.api.rest.model.response.v1.project.maintenance.procedure.operation.MaintenanceProcedureOperations import MaintenanceProcedureOperations
from src.port_adapter.api.rest.model.response.v1.project.maintenance.procedure.operation.MaintenanceProcedureOperation import MaintenanceProcedureOperationDescriptor
from src.port_adapter.api.rest.router.v1.identity.auth import CustomHttpBearer
from src.port_adapter.api.rest.router.v1.project.maintenance.procedure.operation.MaintenanceProcedureOperationType import \
    MaintenanceProcedureOperationType
from src.port_adapter.messaging.common.SimpleProducer import SimpleProducer
from src.port_adapter.messaging.common.model.CommandConstant import CommandConstant
from src.resource.logging.logger import logger
from src.resource.logging.opentelemetry.OpenTelemetry import OpenTelemetry

router = APIRouter()


@router.get(path="/{maintenance_procedure_id}/operations", summary='Get all maintenance procedure operation(s)', response_model=MaintenanceProcedureOperations)
@OpenTelemetry.fastApiTraceOTel
async def getMaintenanceProcedureOperations(*,
                            maintenance_procedure_id: str = Path(..., description='maintenance procedure id as a parent id'),
                            result_from: int = Query(0, description='Starting offset for fetching data'),
                            result_size: int = Query(10, description='Item count to be fetched'),
                            order: str = Query('', description='e.g. id:asc,email:desc'),
                            _=Depends(CustomHttpBearer())):
    try:
        client = MaintenanceProcedureOperationClient()
        orderService = AppDi.instance.get(OrderService)
        order = orderService.orderStringToListOfDict(order)
        return client.maintenanceProcedureOperations(resultFrom=result_from, resultSize=result_size, order=order)
    except grpc.RpcError as e:
        if e.code() == StatusCode.PERMISSION_DENIED:
            return Response(content=str(e), status_code=HTTP_403_FORBIDDEN)
        if e.code() == StatusCode.NOT_FOUND:
            return Response(content=str(e), status_code=HTTP_404_NOT_FOUND)
        else:
            logger.error(
                f'[{getMaintenanceProcedureOperations.__module__}.{getMaintenanceProcedureOperations.__qualname__}] - error response e: {e}')
            return Response(content=str(e), status_code=HTTP_500_INTERNAL_SERVER_ERROR)
    except Exception as e:
        logger.info(e)


@router.get(path="/{maintenance_procedure_id}/operations/{maintenance_procedure_operation_id}", summary='Get maintenance procedure operation by id',
            response_model=MaintenanceProcedureOperationDescriptor)
@OpenTelemetry.fastApiTraceOTel
async def getMaintenanceProcedureOperationById(*,
                                               maintenance_procedure_id: str = Path(..., description='maintenance procedure id as a parent id'),
                                               maintenance_procedure_operation_id: str = Path(..., description='maintenance procedure operation id that is used to fetch maintenance procedure operation data'),
                               _=Depends(CustomHttpBearer())):
    """Get a maintenance procedure operation by id
    """
    try:
        client = MaintenanceProcedureOperationClient()
        return client.maintenanceProcedureOperationById(id=maintenance_procedure_operation_id)
    except grpc.RpcError as e:
        if e.code() == StatusCode.PERMISSION_DENIED:
            return Response(content=str(e), status_code=HTTP_403_FORBIDDEN)
        if e.code() == StatusCode.NOT_FOUND:
            return Response(content=str(e), status_code=HTTP_404_NOT_FOUND)
        else:
            logger.error(
                f'[{getMaintenanceProcedureOperationById.__module__}.{getMaintenanceProcedureOperationById.__qualname__}] - error response e: {e}')
            return Response(content=str(e), status_code=HTTP_500_INTERNAL_SERVER_ERROR)
    except Exception as e:
        logger.info(e)


@router.post("/{maintenance_procedure_id}/operations", summary='Create maintenance procedure operation', status_code=status.HTTP_200_OK)
@OpenTelemetry.fastApiTraceOTel
async def createMaintenanceProcedureOperation(*,
                 maintenance_procedure_id: str = Path(..., description='maintenance procedure id as a parent id'),
                 _=Depends(CustomHttpBearer()),
                 name: str = Body(..., description='name of maintenance procedure operation', embed=True),
                 description: str = Body(..., description='description of maintenance procedure operation', embed=True),
                 type: MaintenanceProcedureOperationType = Body(..., description='type of maintenance procedure operation', embed=True),
                ):
    reqId = str(uuid4())
    producer = AppDi.instance.get(SimpleProducer)
    from src.port_adapter.messaging.common.model.ProjectCommand import ProjectCommand
    producer.produce(obj=ProjectCommand(id=reqId, name=CommandConstant.CREATE_MAINTENANCE_PROCEDURE_OPERATION.value,
                                        metadata=json.dumps({"token": Client.token}),
                                        data=json.dumps(
                                            {
                                             'name': name,
                                             'description': description,
                                             'type': type,
                                             'maintenance_procedure_id': maintenance_procedure_id,
                                             }),
                                        external=[]),
                     schema=ProjectCommand.get_schema())
    return {"request_id": reqId}


@router.put("/{maintenance_procedure_id}/operations/{maintenance_procedure_operation_id}", summary='Update maintenance procedure operation', status_code=status.HTTP_200_OK)
@OpenTelemetry.fastApiTraceOTel
async def updateMaintenanceProcedureOperation(*, _=Depends(CustomHttpBearer()),
                 maintenance_procedure_id: str = Path(..., description='maintenance procedure id as a parent id'),
                 maintenance_procedure_operation_id: str = Path(..., description='maintenance procedure operation id that is used in order to update the maintenance procedure operation'),
                 name: str = Body(..., description='name of name', embed=True),
                 description: str = Body(..., description='description of description', embed=True),
                 type: MaintenanceProcedureOperationType = Body(..., description='type of type', embed=True),
                 ):
    reqId = str(uuid4())
    producer = AppDi.instance.get(SimpleProducer)
    from src.port_adapter.messaging.common.model.ProjectCommand import ProjectCommand
    producer.produce(obj=ProjectCommand(id=reqId, name=CommandConstant.UPDATE_MAINTENANCE_PROCEDURE_OPERATION.value,
                                        metadata=json.dumps({"token": Client.token}),
                                        data=json.dumps(
                                            {'maintenance_procedure_operation_id': maintenance_procedure_operation_id,
                                            'name': name,
                                            'description': description,
                                            'type': type,
                                            'maintenance_procedure_id': maintenance_procedure_id,
                                             }),
                                        external=[]),
                     schema=ProjectCommand.get_schema())
    return {"request_id": reqId}


@router.patch("/{maintenance_procedure_id}/operations/{maintenance_procedure_operation_id}", summary='Partial update maintenance procedure operation', status_code=status.HTTP_200_OK)
@OpenTelemetry.fastApiTraceOTel
async def partialUpdateMaintenanceProcedureOperation(*, _=Depends(CustomHttpBearer()),
                        maintenance_procedure_id: str = Path(..., description='maintenance procedure id as a parent id'),
                        maintenance_procedure_operation_id: str = Path(..., description='maintenance procedure operation id that is used in order to update the maintenance procedure operation'),
                        name: str = Body(..., description='name of name', embed=True),
                        description: str = Body(..., description='description of description', embed=True),
                        type: MaintenanceProcedureOperationType = Body(..., description='type of type', embed=True),
                        ):
    reqId = str(uuid4())
    producer = AppDi.instance.get(SimpleProducer)
    from src.port_adapter.messaging.common.model.ProjectCommand import ProjectCommand
    producer.produce(obj=ProjectCommand(id=reqId, name=CommandConstant.UPDATE_MAINTENANCE_PROCEDURE_OPERATION.value,
                                        metadata=json.dumps({"token": Client.token}),
                                        data=json.dumps(
                                            {'maintenance_procedure_operation_id': maintenance_procedure_operation_id,
                                            'name': name,
                                            'description': description,
                                            'type': type,
                                            'maintenance_procedure_id': maintenance_procedure_id,
                                            }),
                                        external=[]),
                     schema=ProjectCommand.get_schema())
    return {"request_id": reqId}


@router.delete("/{maintenance_procedure_id}/operations/{maintenance_procedure_operation_id}", summary='Delete a maintenance procedure operations', status_code=status.HTTP_200_OK)
@OpenTelemetry.fastApiTraceOTel
async def deleteMaintenanceProcedureOperation(*, _=Depends(CustomHttpBearer()),
                 maintenance_procedure_id: str = Path(..., description='maintenance procedure id as a parent id'),
                 maintenance_procedure_operation_id: str = Path(..., description='maintenance procedure operation id that is used in order to delete the maintenance procedure operation'), ):
    reqId = str(uuid4())
    producer = AppDi.instance.get(SimpleProducer)
    from src.port_adapter.messaging.common.model.ProjectCommand import ProjectCommand
    producer.produce(obj=ProjectCommand(id=reqId, name=CommandConstant.DELETE_MAINTENANCE_PROCEDURE_OPERATION.value,
                                        metadata=json.dumps({"token": Client.token}),
                                        data=json.dumps(
                                            {'maintenance_procedure_operation_id': maintenance_procedure_operation_id}),
                                        external=[]),
                     schema=ProjectCommand.get_schema())
    return {"request_id": reqId}
