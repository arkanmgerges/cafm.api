"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

import json
from uuid import uuid4

import grpc
from fastapi import APIRouter, Depends, Query, Body
from fastapi import Response
from fastapi.params import Path
from grpc.beta.interfaces import StatusCode
from starlette import status
from starlette.status import (
    HTTP_404_NOT_FOUND,
    HTTP_500_INTERNAL_SERVER_ERROR,
    HTTP_403_FORBIDDEN,
)


import src.port_adapter.AppDi as AppDi
from src.domain_model.OrderService import OrderService
from src.port_adapter.api.rest.grpc.Client import Client
from src.port_adapter.api.rest.grpc.v1.project.maintenance.procedure.operation.label.MaintenanceProcedureOperationLabelClient import MaintenanceProcedureOperationLabelClient
from src.port_adapter.api.rest.helper.RequestIdGenerator import RequestIdGenerator
from src.port_adapter.api.rest.model.response.v1.project.maintenance.procedure.operation.label.MaintenanceProcedureOperationLabels import MaintenanceProcedureOperationLabels
from src.port_adapter.api.rest.model.response.v1.project.maintenance.procedure.operation.label.MaintenanceProcedureOperationLabel import MaintenanceProcedureOperationLabelDescriptor
from src.port_adapter.api.rest.router.v1.identity.auth import CustomHttpBearer
from src.port_adapter.api.rest.router.v1.identity.authz import CustomAuthorization
from src.port_adapter.messaging.common.SimpleProducer import SimpleProducer
from src.port_adapter.messaging.common.model.CommandConstant import CommandConstant
from src.resource.logging.logger import logger
from src.resource.logging.opentelemetry.OpenTelemetry import OpenTelemetry

router = APIRouter()


@router.get(path="", summary='Get all maintenance procedure operation label(s)', response_model=MaintenanceProcedureOperationLabels)
@OpenTelemetry.fastApiTraceOTel
async def getMaintenanceProcedureOperationLabels(
    *,
    result_from: int = Query(0, description='Starting offset for fetching data'),
    result_size: int = Query(10, description='Item count to be fetched'),
    orders: str = Query('', description='e.g. id:asc,email:desc'),
    _=Depends(CustomHttpBearer()),
    _1=Depends(CustomAuthorization()),
):
    try:
        client = MaintenanceProcedureOperationLabelClient()
        orderService = AppDi.instance.get(OrderService)
        orders = orderService.orderStringToListOfDict(order)
        return client.maintenanceProcedureOperationLabels(resultFrom=result_from, resultSize=result_size, orders=orders)
    except grpc.RpcError as e:
        if e.code() == StatusCode.PERMISSION_DENIED:
            return Response(content=str(e), status_code=HTTP_403_FORBIDDEN)
        if e.code() == StatusCode.NOT_FOUND:
            return Response(content=str(e), status_code=HTTP_404_NOT_FOUND)
        else:
            logger.error(
                f'[{getMaintenanceProcedureOperationLabels.__module__}.{getMaintenanceProcedureOperationLabels.__qualname__}] - error response e: {e}')
            return Response(content=str(e), status_code=HTTP_500_INTERNAL_SERVER_ERROR)
    except Exception as e:
        logger.info(e)

@router.get(path="/{maintenance_procedure_operation_label_id}", summary='Get maintenance procedure operation label by id',
            response_model=MaintenanceProcedureOperationLabelDescriptor)
@OpenTelemetry.fastApiTraceOTel
async def getMaintenanceProcedureOperationLabelById(
    *,
    maintenance_procedure_operation_label_id: str = Path(
        ...,
        description='maintenance procedure operation label id that is used to fetch maintenance procedure operation label data',
    ),
    _=Depends(CustomHttpBearer()),
    _1=Depends(CustomAuthorization()),
):
    """Get a maintenance procedure operation label by id
    """
    try:
        client = MaintenanceProcedureOperationLabelClient()
        return client.maintenanceProcedureOperationLabelById(id=maintenance_procedure_operation_label_id)
    except grpc.RpcError as e:
        if e.code() == StatusCode.PERMISSION_DENIED:
            return Response(content=str(e), status_code=HTTP_403_FORBIDDEN)
        if e.code() == StatusCode.NOT_FOUND:
            return Response(content=str(e), status_code=HTTP_404_NOT_FOUND)
        else:
            logger.error(
                f'[{getMaintenanceProcedureOperationLabelById.__module__}.{getMaintenanceProcedureOperationLabelById.__qualname__}] - error response e: {e}')
            return Response(content=str(e), status_code=HTTP_500_INTERNAL_SERVER_ERROR)
    except Exception as e:
        logger.info(e)


@router.post("", summary='Create maintenance procedure operation label', status_code=status.HTTP_200_OK)
@OpenTelemetry.fastApiTraceOTel
async def createMaintenanceProcedureOperationLabel(*,
    _=Depends(CustomHttpBearer()),
    _1=Depends(CustomAuthorization()),
        label: str = Body(..., description='label of maintenance procedure operation label', embed=True),
        generate_alert: int = Body(..., description='generate alert of maintenance procedure operation label', embed=True),
        maintenance_procedure_operation_id: str = Body(..., description='maintenance procedure operation id of maintenance procedure operation label', embed=True),
):
    reqId = RequestIdGenerator.generateId()
    producer = AppDi.instance.get(SimpleProducer)
    from src.port_adapter.messaging.common.model.ProjectCommand import ProjectCommand
    client = MaintenanceProcedureOperationLabelClient()
    producer.produce(obj=ProjectCommand(id=reqId, name=CommandConstant.CREATE_MAINTENANCE_PROCEDURE_OPERATION_LABEL.value,
                                        metadata=json.dumps({"token": Client.token}),
                                        data=json.dumps(
                                            {
                                             'maintenance_procedure_operation_label_id': client.newId(),
                                             'label': label,
                                             'generate_alert': generate_alert,
                                             'maintenance_procedure_operation_id': maintenance_procedure_operation_id,
                                             }),
                                        external=[]),
                     schema=ProjectCommand.get_schema())
    return {"request_id": reqId}


@router.put("/{maintenance_procedure_operation_label_id}", summary='Update maintenance procedure operation label', status_code=status.HTTP_200_OK)
@OpenTelemetry.fastApiTraceOTel
async def updateMaintenanceProcedureOperationLabel(*,
    _=Depends(CustomHttpBearer()),
    _1=Depends(CustomAuthorization()),
    maintenance_procedure_operation_label_id: str = Path(..., description='maintenance procedure operation label id that is used in order to update the maintenance procedure operation label'),
        label: str = Body(..., description='label of maintenance procedure operation label', embed=True),
        generate_alert: int = Body(..., description='generate alert of maintenance procedure operation label', embed=True),
        maintenance_procedure_operation_id: str = Body(..., description='maintenance procedure operation id of maintenance procedure operation label', embed=True),
):
    reqId = RequestIdGenerator.generateId()
    producer = AppDi.instance.get(SimpleProducer)
    from src.port_adapter.messaging.common.model.ProjectCommand import ProjectCommand
    producer.produce(obj=ProjectCommand(id=reqId, name=CommandConstant.UPDATE_MAINTENANCE_PROCEDURE_OPERATION_LABEL.value,
                                        metadata=json.dumps({"token": Client.token}),
                                        data=json.dumps(
                                            {'maintenance_procedure_operation_label_id': maintenance_procedure_operation_label_id,
                                            'label': label,
                                            'generate_alert': generate_alert,
                                            'maintenance_procedure_operation_id': maintenance_procedure_operation_id,
                                             }),
                                        external=[]),
                     schema=ProjectCommand.get_schema())
    return {"request_id": reqId}


@router.patch("/{maintenance_procedure_operation_label_id}", summary='Partial update maintenance procedure operation label', status_code=status.HTTP_200_OK)
@OpenTelemetry.fastApiTraceOTel
async def partialUpdateMaintenanceProcedureOperationLabel(*,
    _=Depends(CustomHttpBearer()),
    _1=Depends(CustomAuthorization()),
    maintenance_procedure_operation_label_id: str = Path(..., description='maintenance procedure operation label id that is used in order to update the maintenance procedure operation label'),
        label: str = Body(None, description='label of maintenance procedure operation label', embed=True),
        generate_alert: int = Body(None, description='generate alert of maintenance procedure operation label', embed=True),
        maintenance_procedure_operation_id: str = Body(None, description='maintenance procedure operation id of maintenance procedure operation label', embed=True),
):
    reqId = RequestIdGenerator.generateId()
    producer = AppDi.instance.get(SimpleProducer)
    from src.port_adapter.messaging.common.model.ProjectCommand import ProjectCommand
    producer.produce(obj=ProjectCommand(id=reqId, name=CommandConstant.UPDATE_MAINTENANCE_PROCEDURE_OPERATION_LABEL.value,
                                        metadata=json.dumps({"token": Client.token}),
                                        data=json.dumps(
                                            {'maintenance_procedure_operation_label_id': maintenance_procedure_operation_label_id,
                                            'label': label,
                                            'generate_alert': generate_alert,
                                            'maintenance_procedure_operation_id': maintenance_procedure_operation_id,
                                            }),
                                        external=[]),
                     schema=ProjectCommand.get_schema())
    return {"request_id": reqId}


@router.delete("/{maintenance_procedure_operation_label_id}", summary='Delete a maintenance procedure operation labels', status_code=status.HTTP_200_OK)
@OpenTelemetry.fastApiTraceOTel
async def deleteMaintenanceProcedureOperationLabel(*,
    _=Depends(CustomHttpBearer()),
    _1=Depends(CustomAuthorization()),
    maintenance_procedure_operation_label_id: str = Path(
        ..., description='maintenance procedure operation label id that is used in order to delete the maintenance procedure operation label'
    ),
):
    reqId = RequestIdGenerator.generateId()
    producer = AppDi.instance.get(SimpleProducer)
    from src.port_adapter.messaging.common.model.ProjectCommand import ProjectCommand
    producer.produce(obj=ProjectCommand(id=reqId, name=CommandConstant.DELETE_MAINTENANCE_PROCEDURE_OPERATION_LABEL.value,
                                        metadata=json.dumps({"token": Client.token}),
                                        data=json.dumps(
                                            {'maintenance_procedure_operation_label_id': maintenance_procedure_operation_label_id}),
                                        external=[]),
                     schema=ProjectCommand.get_schema())
    return {"request_id": reqId}
