"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

import json
from typing import Optional
from uuid import uuid4

import grpc
from fastapi import APIRouter, Depends, Query, Body
from fastapi import Response
from fastapi.params import Path
from grpc.beta.interfaces import StatusCode
from starlette import status
from starlette.status import (
    HTTP_404_NOT_FOUND,
    HTTP_500_INTERNAL_SERVER_ERROR,
    HTTP_403_FORBIDDEN,
)

import src.port_adapter.AppDi as AppDi
from src.domain_model.OrderService import OrderService
from src.port_adapter.api.rest.grpc.Client import Client
from src.port_adapter.api.rest.grpc.v1.project.daily_check.procedure.DailyCheckProcedureClient import (
    DailyCheckProcedureClient,
)
from src.port_adapter.api.rest.grpc.v1.project.daily_check.procedure.operation.DailyCheckProcedureOperationClient import (
    DailyCheckProcedureOperationClient,
)
from src.port_adapter.api.rest.grpc.v1.project.daily_check.procedure.operation.parameter.DailyCheckProcedureOperationParameterClient import (
    DailyCheckProcedureOperationParameterClient,
)
from src.port_adapter.api.rest.helper.RequestIdGenerator import RequestIdGenerator
from src.port_adapter.api.rest.model.response.v1.project.daily_check.procedure.DailyCheckProcedure import (
    DailyCheckProcedureDescriptor,
)
from src.port_adapter.api.rest.model.response.v1.project.daily_check.procedure.DailyCheckProcedures import (
    DailyCheckProcedures,
)
from src.port_adapter.api.rest.model.response.v1.project.daily_check.procedure.operation.DailyCheckProcedureOperation import (
    DailyCheckProcedureOperationDescriptor,
)
from src.port_adapter.api.rest.model.response.v1.project.daily_check.procedure.operation.DailyCheckProcedureOperations import (
    DailyCheckProcedureOperations,
)
from src.port_adapter.api.rest.model.response.v1.project.daily_check.procedure.operation.parameter.DailyCheckProcedureOperationParameter import (
    DailyCheckProcedureOperationParameterDescriptor,
)
from src.port_adapter.api.rest.model.response.v1.project.daily_check.procedure.operation.parameter.DailyCheckProcedureOperationParameters import (
    DailyCheckProcedureOperationParameters,
)
from src.port_adapter.api.rest.router.v1.identity.auth import CustomHttpBearer
from src.port_adapter.api.rest.router.v1.identity.authz import CustomAuthorization
from src.port_adapter.api.rest.router.v1.project.daily_check.procedure.DailyCheckProcedureOperationType import (
    DailyCheckProcedureOperationType,
)

from src.port_adapter.api.rest.grpc.v1.project.daily_check.procedure.operation.label.DailyCheckProcedureOperationLabelClient import DailyCheckProcedureOperationLabelClient
from src.port_adapter.api.rest.model.response.v1.project.daily_check.procedure.DailyCheckProcedureOperationLabels import DailyCheckProcedureOperationLabels
from src.port_adapter.api.rest.model.response.v1.project.daily_check.procedure.DailyCheckProcedureOperationLabel import DailyCheckProcedureOperationLabelDescriptor

from src.port_adapter.messaging.common.SimpleProducer import SimpleProducer
from src.port_adapter.messaging.common.model.CommandConstant import CommandConstant
from src.resource.logging.logger import logger
from src.resource.logging.opentelemetry.OpenTelemetry import OpenTelemetry

router = APIRouter()


# region GET /by_XXX/{id}
@router.get(
    path="",
    summary="Get all daily check procedure(s)",
    response_model=DailyCheckProcedures,
)
@OpenTelemetry.fastApiTraceOTel
async def getDailyCheckProcedures(
    *,
    result_from: int = Query(0, description="Starting offset for fetching data"),
    result_size: int = Query(10, description="Item count to be fetched"),
    orders: str = Query("", description="e.g. id:asc,email:desc"),
    _=Depends(CustomHttpBearer()),
    __=Depends(CustomAuthorization()),
):
    try:
        client = DailyCheckProcedureClient()
        orderService = AppDi.instance.get(OrderService)
        orders = orderService.orderStringToListOfDict(orders)
        return client.dailyCheckProcedures(
            resultFrom=result_from, resultSize=result_size, orders=orders
        )
    except grpc.RpcError as e:
        if e.code() == StatusCode.PERMISSION_DENIED:
            return Response(content=str(e), status_code=HTTP_403_FORBIDDEN)
        if e.code() == StatusCode.NOT_FOUND:
            return Response(content=str(e), status_code=HTTP_404_NOT_FOUND)
        else:
            logger.error(
                f"[{getDailyCheckProcedures.__module__}.{getDailyCheckProcedures.__qualname__}] - error response e: {e}"
            )
            return Response(content=str(e), status_code=HTTP_500_INTERNAL_SERVER_ERROR)
    except Exception as e:
        logger.info(e)


@router.get(
    path="/by_equipment_or_group_id/{equipment_or_group_id}",
    summary="Get all daily check procedure by equipment or group id",
    response_model=DailyCheckProcedures,
)
@OpenTelemetry.fastApiTraceOTel
async def getDailyCheckProceduresByEquipmentOrGroupId(
    *,
    equipment_or_group_id: str = Path(
        ...,
        description="equipment or group id that is used to fetch daily check procedure data",
    ),
    result_from: int = Query(0, description="Starting offset for fetching data"),
    result_size: int = Query(10, description="Item count to be fetched"),
    orders: str = Query("", description="e.g. id:asc,email:desc"),
    _=Depends(CustomHttpBearer()),
    __=Depends(CustomAuthorization()),
):
    try:
        client = DailyCheckProcedureClient()
        orderService = AppDi.instance.get(OrderService)
        orders = orderService.orderStringToListOfDict(orders)
        return client.dailyCheckProceduresByEquipmentOrGroupId(
            equipmentOrGroupId=equipment_or_group_id,
            resultFrom=result_from,
            resultSize=result_size,
            orders=orders,
        )
    except grpc.RpcError as e:
        if e.code() == StatusCode.PERMISSION_DENIED:
            return Response(content=str(e), status_code=HTTP_403_FORBIDDEN)
        if e.code() == StatusCode.NOT_FOUND:
            return Response(content=str(e), status_code=HTTP_404_NOT_FOUND)
        else:
            logger.error(
                f"[{getDailyCheckProceduresByEquipmentOrGroupId.__module__}.{getDailyCheckProceduresByEquipmentOrGroupId.__qualname__}] - error response e: {e}"
            )
            return Response(content=str(e), status_code=HTTP_500_INTERNAL_SERVER_ERROR)
    except Exception as e:
        logger.info(e)

@router.get(
    path="/by_project_id/{project_id}",
    summary="Get all daily check procedure by project id",
    response_model=DailyCheckProcedures,
)
@OpenTelemetry.fastApiTraceOTel
async def getDailyCheckProceduresByProjectId(
    *,
    project_id: str = Path(
        ...,
        description="project id that is used to fetch daily check procedure data",
    ),
    result_from: int = Query(0, description="Starting offset for fetching data"),
    result_size: int = Query(10, description="Item count to be fetched"),
    orders: str = Query("", description="e.g. id:asc,email:desc"),
    _=Depends(CustomHttpBearer()),
    __=Depends(CustomAuthorization()),
):
    try:
        client = DailyCheckProcedureClient()
        orderService = AppDi.instance.get(OrderService)
        orders = orderService.orderStringToListOfDict(orders)
        return client.dailyCheckProceduresByProjectId(
            projectId=project_id,
            resultFrom=result_from,
            resultSize=result_size,
            orders=orders,
        )
    except grpc.RpcError as e:
        if e.code() == StatusCode.PERMISSION_DENIED:
            return Response(content=str(e), status_code=HTTP_403_FORBIDDEN)
        if e.code() == StatusCode.NOT_FOUND:
            return Response(content=str(e), status_code=HTTP_404_NOT_FOUND)
        else:
            logger.error(
                f"[{getDailyCheckProceduresByProjectId.__module__}.{getDailyCheckProceduresByProjectId.__qualname__}] - error response e: {e}"
            )
            return Response(content=str(e), status_code=HTTP_500_INTERNAL_SERVER_ERROR)
    except Exception as e:
        logger.info(e)

# endregion

# region GET/DELETE /operations/parameters/{daily_check_procedure_operation_parameter_id}
@router.get(
    path="/operations/parameters/{daily_check_procedure_operation_parameter_id}",
    summary="Get daily check procedure operation parameter by id",
    response_model=DailyCheckProcedureOperationParameterDescriptor,
)
@OpenTelemetry.fastApiTraceOTel
async def getDailyCheckProcedureOperationParameterById(
    *,
    daily_check_procedure_operation_parameter_id: str = Path(
        ...,
        description="daily check procedure operation parameter id that is used to fetch daily check procedure operation parameter data",
    ),
    _=Depends(CustomHttpBearer()),
    __=Depends(CustomAuthorization()),
):
    """Get a daily check procedure operation parameter by id"""
    try:
        client = DailyCheckProcedureOperationParameterClient()
        return client.dailyCheckProcedureOperationParameterById(
            id=daily_check_procedure_operation_parameter_id
        )
    except grpc.RpcError as e:
        if e.code() == StatusCode.PERMISSION_DENIED:
            return Response(content=str(e), status_code=HTTP_403_FORBIDDEN)
        if e.code() == StatusCode.NOT_FOUND:
            return Response(content=str(e), status_code=HTTP_404_NOT_FOUND)
        else:
            logger.error(
                f"[{getDailyCheckProcedureOperationParameterById.__module__}.{getDailyCheckProcedureOperationParameterById.__qualname__}] - error response e: {e}"
            )
            return Response(content=str(e), status_code=HTTP_500_INTERNAL_SERVER_ERROR)
    except Exception as e:
        logger.info(e)


@router.delete(
    "/operations/parameters/{daily_check_procedure_operation_parameter_id}",
    summary="Delete a daily check procedure operation parameters",
    status_code=status.HTTP_200_OK,
)
@OpenTelemetry.fastApiTraceOTel
async def deleteDailyCheckProcedureOperationParameter(
    *,
    _=Depends(CustomHttpBearer()),
    __=Depends(CustomAuthorization()),
    daily_check_procedure_operation_parameter_id: str = Path(
        ...,
        description="daily check procedure operation parameter id that is used in order to delete the daily check procedure operation parameter",
    ),
):
    reqId = RequestIdGenerator.generateId()
    producer = AppDi.instance.get(SimpleProducer)
    from src.port_adapter.messaging.common.model.ProjectCommand import ProjectCommand

    producer.produce(
        obj=ProjectCommand(
            id=reqId,
            name=CommandConstant.DELETE_DAILY_CHECK_PROCEDURE_OPERATION_PARAMETER.value,
            metadata=json.dumps({"token": Client.token}),
            data=json.dumps(
                {
                    "daily_check_procedure_operation_parameter_id": daily_check_procedure_operation_parameter_id
                }
            ),
            external=[],
        ),
        schema=ProjectCommand.get_schema(),
    )
    return {"request_id": reqId}


# endregion

# region GET/POST /operations/{daily_check_procedure_operation_id}/parameters
@router.get(
    path="/operations/{daily_check_procedure_operation_id}/parameters",
    summary="Get all daily check procedure operation parameter by daily check procedure operation id",
    response_model=DailyCheckProcedureOperationParameters,
)
@OpenTelemetry.fastApiTraceOTel
async def getDailyCheckProcedureOperationParametersByDailyCheckProcedureOperationId(
    *,
    daily_check_procedure_operation_id: str = Path(
        ...,
        description="daily check procedure operation id that is used to fetch daily check procedure operation parameter data",
    ),
    result_from: int = Query(0, description="Starting offset for fetching data"),
    result_size: int = Query(10, description="Item count to be fetched"),
    orders: str = Query("", description="e.g. id:asc,email:desc"),
    _=Depends(CustomHttpBearer()),
    __=Depends(CustomAuthorization()),
):
    try:
        client = DailyCheckProcedureOperationParameterClient()
        orderService = AppDi.instance.get(OrderService)
        orders = orderService.orderStringToListOfDict(orders)
        return client.dailyCheckProcedureOperationParametersByDailyCheckProcedureOperationId(
            dailyCheckProcedureOperationId=daily_check_procedure_operation_id,
            resultFrom=result_from,
            resultSize=result_size,
            orders=orders,
        )
    except grpc.RpcError as e:
        if e.code() == StatusCode.PERMISSION_DENIED:
            return Response(content=str(e), status_code=HTTP_403_FORBIDDEN)
        if e.code() == StatusCode.NOT_FOUND:
            return Response(content=str(e), status_code=HTTP_404_NOT_FOUND)
        else:
            logger.error(
                f"[{getDailyCheckProcedureOperationParametersByDailyCheckProcedureOperationId.__module__}.{getDailyCheckProcedureOperationParametersByDailyCheckProcedureOperationId.__qualname__}] - error response e: {e}"
            )
            return Response(content=str(e), status_code=HTTP_500_INTERNAL_SERVER_ERROR)
    except Exception as e:
        logger.info(e)


@router.post(
    "/operations/{daily_check_procedure_operation_id}/parameters",
    summary="Create daily check procedure operation parameter",
    status_code=status.HTTP_200_OK,
)
@OpenTelemetry.fastApiTraceOTel
async def createDailyCheckProcedureOperationParameter(
    *,
    _=Depends(CustomHttpBearer()),
    __=Depends(CustomAuthorization()),
    name: str = Body(
        ..., description="name of daily check procedure operation parameter", embed=True
    ),
    unit_id: str = Body(
        ...,
        description="unit id of daily check procedure operation parameter",
        embed=True,
    ),
    daily_check_procedure_operation_id: str = Path(
        ...,
        description="daily check procedure operation id of daily check procedure operation parameter",
        embed=True,
    ),
    min_value: float = Body(
        ...,
        description="min value of daily check procedure operation parameter",
        embed=True,
    ),
    max_value: float = Body(
        ...,
        description="max value of daily check procedure operation parameter",
        embed=True,
    ),
):
    try:
        min_value = float(min_value)
        max_value = float(max_value)
    except:
        raise ValueError(
            f"Minimum and maximum values must be of type float. min. value: {min_value}, max. value: {max_value}"
        )
    if min_value > max_value:
        raise ValueError("Minimum value must be less or equal than maximum value")

    try:
        client = DailyCheckProcedureOperationClient()
        dailyCheckProcedureOperation = client.dailyCheckProcedureOperationById(
            id=daily_check_procedure_operation_id
        )

        if (
            dailyCheckProcedureOperation.type
            == DailyCheckProcedureOperationType.VISUAL.value
        ):
            raise ValueError(
                "Cannot create parameters for daily check procedure operation of type 'visual'"
            )

    except grpc.RpcError as e:
        if e.code() == StatusCode.PERMISSION_DENIED:
            return Response(content=str(e), status_code=HTTP_403_FORBIDDEN)
        if e.code() == StatusCode.NOT_FOUND:
            return Response(content=str(e), status_code=HTTP_404_NOT_FOUND)
        else:
            logger.error(
                f"[{updateDailyCheckProcedureOperation.__module__}.{updateDailyCheckProcedureOperation.__qualname__}] - error response e: {e}"
            )
            return Response(content=str(e), status_code=HTTP_500_INTERNAL_SERVER_ERROR)

    reqId = RequestIdGenerator.generateId()
    producer = AppDi.instance.get(SimpleProducer)
    from src.port_adapter.messaging.common.model.ProjectCommand import ProjectCommand

    client = DailyCheckProcedureOperationParameterClient()
    producer.produce(
        obj=ProjectCommand(
            id=reqId,
            name=CommandConstant.CREATE_DAILY_CHECK_PROCEDURE_OPERATION_PARAMETER.value,
            metadata=json.dumps({"token": Client.token}),
            data=json.dumps(
                {
                    "daily_check_procedure_operation_parameter_id": client.newId(),
                    "name": name,
                    "unit_id": unit_id,
                    "daily_check_procedure_operation_id": daily_check_procedure_operation_id,
                    "min_value": min_value,
                    "max_value": max_value,
                }
            ),
            external=[],
        ),
        schema=ProjectCommand.get_schema(),
    )
    return {"request_id": reqId}


# endregion

# region PUT/PATCH /operations/{daily_check_procedure_operation_id}/parameters/{daily_check_procedure_operation_parameter_id}
@router.put(
    "/operations/{daily_check_procedure_operation_id}/parameters/{daily_check_procedure_operation_parameter_id}",
    summary="Update daily check procedure operation parameter",
    status_code=status.HTTP_200_OK,
)
@OpenTelemetry.fastApiTraceOTel
async def updateDailyCheckProcedureOperationParameter(
    *,
    _=Depends(CustomHttpBearer()),
    __=Depends(CustomAuthorization()),
    daily_check_procedure_operation_parameter_id: str = Path(
        ...,
        description="daily check procedure operation parameter id that is used in order to update the daily check procedure operation parameter",
    ),
    name: str = Body(..., description="name of name", embed=True),
    unit_id: str = Body(..., description="unit id of unit id", embed=True),
    daily_check_procedure_operation_id: str = Path(
        ...,
        description="daily check procedure operation id of daily check procedure operation id",
        embed=True,
    ),
    min_value: float = Body(..., description="min value of min value", embed=True),
    max_value: float = Body(..., description="max value of max value", embed=True),
):
    reqId = RequestIdGenerator.generateId()
    producer = AppDi.instance.get(SimpleProducer)
    from src.port_adapter.messaging.common.model.ProjectCommand import ProjectCommand

    try:
        min_value = float(min_value)
        max_value = float(max_value)
    except:
        raise ValueError(
            f"Minimum and maximum values must be of type float. min. value: {min_value}, max. value: {max_value}"
        )
    if min_value > max_value:
        raise ValueError("Minimum value must be less or equal than maximum value")

    producer.produce(
        obj=ProjectCommand(
            id=reqId,
            name=CommandConstant.UPDATE_DAILY_CHECK_PROCEDURE_OPERATION_PARAMETER.value,
            metadata=json.dumps({"token": Client.token}),
            data=json.dumps(
                {
                    "daily_check_procedure_operation_parameter_id": daily_check_procedure_operation_parameter_id,
                    "name": name,
                    "unit_id": unit_id,
                    "daily_check_procedure_operation_id": daily_check_procedure_operation_id,
                    "min_value": min_value,
                    "max_value": max_value,
                }
            ),
            external=[],
        ),
        schema=ProjectCommand.get_schema(),
    )
    return {"request_id": reqId}


@router.patch(
    "/operations/{daily_check_procedure_operation_id}/parameters/{daily_check_procedure_operation_parameter_id}",
    summary="Partial update daily check procedure operation parameter",
    status_code=status.HTTP_200_OK,
)
@OpenTelemetry.fastApiTraceOTel
async def partialUpdateDailyCheckProcedureOperationParameter(
    *,
    _=Depends(CustomHttpBearer()),
    __=Depends(CustomAuthorization()),
    daily_check_procedure_operation_id: str = Path(
        ...,
        description="daily check procedure operation id of daily check procedure operation id",
    ),
    daily_check_procedure_operation_parameter_id: str = Path(
        ...,
        description="daily check procedure operation parameter id that is used in order to update the daily check procedure operation parameter",
    ),
    name: str = Body(None, description="name of name", embed=True),
    unit_id: str = Body(None, description="unit id of unit id", embed=True),
    min_value: float = Body(None, description="min value of min value", embed=True),
    max_value: float = Body(None, description="max value of max value", embed=True),
):
    reqId = RequestIdGenerator.generateId()
    producer = AppDi.instance.get(SimpleProducer)
    from src.port_adapter.messaging.common.model.ProjectCommand import ProjectCommand

    producer.produce(
        obj=ProjectCommand(
            id=reqId,
            name=CommandConstant.UPDATE_DAILY_CHECK_PROCEDURE_OPERATION_PARAMETER.value,
            metadata=json.dumps({"token": Client.token}),
            data=json.dumps(
                {
                    "daily_check_procedure_operation_parameter_id": daily_check_procedure_operation_parameter_id,
                    "name": name,
                    "unit_id": unit_id,
                    "daily_check_procedure_operation_id": daily_check_procedure_operation_id,
                    "min_value": min_value,
                    "max_value": max_value,
                }
            ),
            external=[],
        ),
        schema=ProjectCommand.get_schema(),
    )
    return {"request_id": reqId}


# endregion

# region GET/DELETE /operations/{daily_check_procedure_operation_id}
@router.delete(
    "/operations/{daily_check_procedure_operation_id}",
    summary="Delete a daily check procedure operations",
    status_code=status.HTTP_200_OK,
)
@OpenTelemetry.fastApiTraceOTel
async def deleteDailyCheckProcedureOperation(
    *,
    _=Depends(CustomHttpBearer()),
    __=Depends(CustomAuthorization()),
    daily_check_procedure_operation_id: str = Path(
        ...,
        description="daily check procedure operation id that is used in order to delete the daily check procedure operation",
    ),
):
    reqId = RequestIdGenerator.generateId()
    producer = AppDi.instance.get(SimpleProducer)
    from src.port_adapter.messaging.common.model.ProjectCommand import ProjectCommand

    producer.produce(
        obj=ProjectCommand(
            id=reqId,
            name=CommandConstant.DELETE_DAILY_CHECK_PROCEDURE_OPERATION.value,
            metadata=json.dumps({"token": Client.token}),
            data=json.dumps(
                {
                    "daily_check_procedure_operation_id": daily_check_procedure_operation_id
                }
            ),
            external=[],
        ),
        schema=ProjectCommand.get_schema(),
    )
    return {"request_id": reqId}


@router.get(
    path="/operations/{daily_check_procedure_operation_id}",
    summary="Get daily check procedure operation by id",
    response_model=DailyCheckProcedureOperationDescriptor,
)
@OpenTelemetry.fastApiTraceOTel
async def getDailyCheckProcedureOperationById(
    *,
    daily_check_procedure_operation_id: str = Path(
        ...,
        description="daily check procedure operation id that is used to fetch daily check procedure operation data",
    ),
    _=Depends(CustomHttpBearer()),
    __=Depends(CustomAuthorization()),
):
    """Get a daily check procedure operation by id"""
    try:
        client = DailyCheckProcedureOperationClient()
        return client.dailyCheckProcedureOperationById(
            id=daily_check_procedure_operation_id
        )
    except grpc.RpcError as e:
        if e.code() == StatusCode.PERMISSION_DENIED:
            return Response(content=str(e), status_code=HTTP_403_FORBIDDEN)
        if e.code() == StatusCode.NOT_FOUND:
            return Response(content=str(e), status_code=HTTP_404_NOT_FOUND)
        else:
            logger.error(
                f"[{getDailyCheckProcedureOperationById.__module__}.{getDailyCheckProcedureOperationById.__qualname__}] - error response e: {e}"
            )
            return Response(content=str(e), status_code=HTTP_500_INTERNAL_SERVER_ERROR)
    except Exception as e:
        logger.info(e)


# endregion

# region GET/POST/PUT/PATCH/DELETE /{daily_check_procedure_id}
@router.get(
    path="/{daily_check_procedure_id}",
    summary="Get daily check procedure by id",
    response_model=DailyCheckProcedureDescriptor,
)
@OpenTelemetry.fastApiTraceOTel
async def getDailyCheckProcedureById(
    *,
    daily_check_procedure_id: str = Path(
        ...,
        description="daily check procedure id that is used to fetch daily check procedure data",
    ),
    _=Depends(CustomHttpBearer()),
    __=Depends(CustomAuthorization()),
):
    """Get a daily check procedure by id"""
    try:
        client = DailyCheckProcedureClient()
        return client.dailyCheckProcedureById(id=daily_check_procedure_id)
    except grpc.RpcError as e:
        if e.code() == StatusCode.PERMISSION_DENIED:
            return Response(content=str(e), status_code=HTTP_403_FORBIDDEN)
        if e.code() == StatusCode.NOT_FOUND:
            return Response(content=str(e), status_code=HTTP_404_NOT_FOUND)
        else:
            logger.error(
                f"[{getDailyCheckProcedureById.__module__}.{getDailyCheckProcedureById.__qualname__}] - error response e: {e}"
            )
            return Response(content=str(e), status_code=HTTP_500_INTERNAL_SERVER_ERROR)
    except Exception as e:
        logger.info(e)


@router.post("", summary="Create daily check procedure", status_code=status.HTTP_200_OK)
@OpenTelemetry.fastApiTraceOTel
async def createDailyCheckProcedure(
    *,
    _=Depends(CustomHttpBearer()),
    __=Depends(CustomAuthorization()),
    name: str = Body(..., description="name of daily check procedure", embed=True),
    description: str = Body(
        ..., description="description of daily check procedure", embed=True
    ),
    equipment_id: Optional[str] = Body(
        description="equipment id of daily check procedure", embed=True, default=None
    ),
    project_id: str = Body(
        description="project id", embed=True, default=None
    ),
    equipment_category_group_id: Optional[str] = Body(
        description="equipment category group id of daily check procedure",
        embed=True,
        default=None,
    ),
):
    reqId = RequestIdGenerator.generateId()
    producer = AppDi.instance.get(SimpleProducer)
    from src.port_adapter.messaging.common.model.ProjectCommand import ProjectCommand

    client = DailyCheckProcedureClient()
    producer.produce(
        obj=ProjectCommand(
            id=reqId,
            name=CommandConstant.CREATE_DAILY_CHECK_PROCEDURE.value,
            metadata=json.dumps({"token": Client.token}),
            data=json.dumps(
                {
                    "daily_check_procedure_id": client.newId(),
                    "name": name,
                    "description": description,
                    "project_id": project_id,
                    "equipment_id": equipment_id,
                    "equipment_category_group_id": equipment_category_group_id,
                }
            ),
            external=[],
        ),
        schema=ProjectCommand.get_schema(),
    )
    return {"request_id": reqId}


@router.put(
    "/{daily_check_procedure_id}",
    summary="Update daily check procedure",
    status_code=status.HTTP_200_OK,
)
@OpenTelemetry.fastApiTraceOTel
async def updateDailyCheckProcedure(
    *,
    _=Depends(CustomHttpBearer()),
    __=Depends(CustomAuthorization()),
    daily_check_procedure_id: str = Path(
        ...,
        description="daily check procedure id that is used in order to update the daily check procedure",
    ),
    name: str = Body(..., description="name of name", embed=True),
    description: str = Body(..., description="description of description", embed=True),
    project_id: str = Body(
        default=None, description="project id", embed=True
    ),
    equipment_id: Optional[str] = Body(
        default=None, description="equipment id of equipment id", embed=True
    ),
    equipment_category_group_id: Optional[str] = Body(
        default=None,
        description="equipment category group id of equipment category group id",
        embed=True,
    ),
):
    reqId = RequestIdGenerator.generateId()
    producer = AppDi.instance.get(SimpleProducer)
    from src.port_adapter.messaging.common.model.ProjectCommand import ProjectCommand

    producer.produce(
        obj=ProjectCommand(
            id=reqId,
            name=CommandConstant.UPDATE_DAILY_CHECK_PROCEDURE.value,
            metadata=json.dumps({"token": Client.token}),
            data=json.dumps(
                {
                    "daily_check_procedure_id": daily_check_procedure_id,
                    "name": name,
                    "description": description,
                    "project_id": project_id,
                    "equipment_id": equipment_id,
                    "equipment_category_group_id": equipment_category_group_id,
                }
            ),
            external=[],
        ),
        schema=ProjectCommand.get_schema(),
    )
    return {"request_id": reqId}


@router.patch(
    "/{daily_check_procedure_id}",
    summary="Partial update daily check procedure",
    status_code=status.HTTP_200_OK,
)
@OpenTelemetry.fastApiTraceOTel
async def partialUpdateDailyCheckProcedure(
    *,
    _=Depends(CustomHttpBearer()),
    __=Depends(CustomAuthorization()),
    daily_check_procedure_id: str = Path(
        ...,
        description="daily check procedure id that is used in order to update the daily check procedure",
    ),
    name: str = Body(None, description="name of name", embed=True),
    description: str = Body(None, description="description of description", embed=True),
    project_id: Optional[str] = Body(
        default=None, description="project id", embed=True
    ),
    equipment_id: str = Body(
        None, description="equipment id of equipment id", embed=True
    ),
    equipment_category_group_id: str = Body(
        None,
        description="equipment category group id of equipment category group id",
        embed=True,
    ),
):
    reqId = RequestIdGenerator.generateId()
    producer = AppDi.instance.get(SimpleProducer)
    from src.port_adapter.messaging.common.model.ProjectCommand import ProjectCommand

    producer.produce(
        obj=ProjectCommand(
            id=reqId,
            name=CommandConstant.UPDATE_DAILY_CHECK_PROCEDURE.value,
            metadata=json.dumps({"token": Client.token}),
            data=json.dumps(
                {
                    "daily_check_procedure_id": daily_check_procedure_id,
                    "name": name,
                    "description": description,
                    "project_id": project_id,
                    "equipment_id": equipment_id,
                    "equipment_category_group_id": equipment_category_group_id,
                }
            ),
            external=[],
        ),
        schema=ProjectCommand.get_schema(),
    )
    return {"request_id": reqId}


@router.delete(
    "/{daily_check_procedure_id}",
    summary="Delete a daily check procedures",
    status_code=status.HTTP_200_OK,
)
@OpenTelemetry.fastApiTraceOTel
async def deleteDailyCheckProcedure(
    *,
    _=Depends(CustomHttpBearer()),
    __=Depends(CustomAuthorization()),
    daily_check_procedure_id: str = Path(
        ...,
        description="daily check procedure id that is used in order to delete the daily check procedure",
    ),
):
    reqId = RequestIdGenerator.generateId()
    producer = AppDi.instance.get(SimpleProducer)
    from src.port_adapter.messaging.common.model.ProjectCommand import ProjectCommand

    producer.produce(
        obj=ProjectCommand(
            id=reqId,
            name=CommandConstant.DELETE_DAILY_CHECK_PROCEDURE.value,
            metadata=json.dumps({"token": Client.token}),
            data=json.dumps({"daily_check_procedure_id": daily_check_procedure_id}),
            external=[],
        ),
        schema=ProjectCommand.get_schema(),
    )
    return {"request_id": reqId}


# endregion

# region GET/POST /{daily_check_procedure_id}/operations
@router.get(
    path="/{daily_check_procedure_id}/operations",
    summary="Get all daily check procedure operation by daily check procedure id",
    response_model=DailyCheckProcedureOperations,
)
@OpenTelemetry.fastApiTraceOTel
async def getDailyCheckProcedureOperationsByDailyCheckProcedureId(
    *,
    daily_check_procedure_id: str = Path(
        ...,
        description="daily check procedure id that is used to fetch daily check procedure operation data",
    ),
    result_from: int = Query(0, description="Starting offset for fetching data"),
    result_size: int = Query(10, description="Item count to be fetched"),
    orders: str = Query("", description="e.g. id:asc,email:desc"),
    _=Depends(CustomHttpBearer()),
    __=Depends(CustomAuthorization()),
):
    try:
        client = DailyCheckProcedureOperationClient()
        orderService = AppDi.instance.get(OrderService)
        orders = orderService.orderStringToListOfDict(orders)
        return client.dailyCheckProcedureOperationsByDailyCheckProcedureId(
            dailyCheckProcedureId=daily_check_procedure_id,
            resultFrom=result_from,
            resultSize=result_size,
            orders=orders,
        )
    except grpc.RpcError as e:
        if e.code() == StatusCode.PERMISSION_DENIED:
            return Response(content=str(e), status_code=HTTP_403_FORBIDDEN)
        if e.code() == StatusCode.NOT_FOUND:
            return Response(content=str(e), status_code=HTTP_404_NOT_FOUND)
        else:
            logger.error(
                f"[{getDailyCheckProcedureOperationsByDailyCheckProcedureId.__module__}.{getDailyCheckProcedureOperationsByDailyCheckProcedureId.__qualname__}] - error response e: {e}"
            )
            return Response(content=str(e), status_code=HTTP_500_INTERNAL_SERVER_ERROR)
    except Exception as e:
        logger.info(e)


@router.post(
    "/{daily_check_procedure_id}/operations",
    summary="Create daily check procedure operation",
    status_code=status.HTTP_200_OK,
)
@OpenTelemetry.fastApiTraceOTel
async def createDailyCheckProcedureOperation(
    *,
    _=Depends(CustomHttpBearer()),
    __=Depends(CustomAuthorization()),
    name: str = Body(
        ..., description="name of daily check procedure operation", embed=True
    ),
    description: str = Body(
        ..., description="description of daily check procedure operation", embed=True
    ),
    type: DailyCheckProcedureOperationType = Body(
        ..., description="type of daily check procedure operation", embed=True
    ),
    daily_check_procedure_id: str = Path(
        ...,
        description="daily check procedure id of daily check procedure operation",
        embed=True,
    ),
):
    reqId = RequestIdGenerator.generateId()
    producer = AppDi.instance.get(SimpleProducer)
    from src.port_adapter.messaging.common.model.ProjectCommand import ProjectCommand

    client = DailyCheckProcedureOperationClient()
    producer.produce(
        obj=ProjectCommand(
            id=reqId,
            name=CommandConstant.CREATE_DAILY_CHECK_PROCEDURE_OPERATION.value,
            metadata=json.dumps({"token": Client.token}),
            data=json.dumps(
                {
                    "daily_check_procedure_operation_id": client.newId(),
                    "name": name,
                    "description": description,
                    "type": type,
                    "daily_check_procedure_id": daily_check_procedure_id,
                }
            ),
            external=[],
        ),
        schema=ProjectCommand.get_schema(),
    )
    return {"request_id": reqId}


# endregion

# region PUT/PATCH /{daily_check_procedure_id}/operations/{daily_check_procedure_operation_id}
@router.put(
    "/{daily_check_procedure_id}/operations/{daily_check_procedure_operation_id}",
    summary="Update daily check procedure operation",
    status_code=status.HTTP_200_OK,
)
@OpenTelemetry.fastApiTraceOTel
async def updateDailyCheckProcedureOperation(
    *,
    _=Depends(CustomHttpBearer()),
    __=Depends(CustomAuthorization()),
    daily_check_procedure_operation_id: str = Path(
        ...,
        description="daily check procedure operation id that is used in order to update the daily check procedure operation",
    ),
    name: str = Body(..., description="name of name", embed=True),
    description: str = Body(..., description="description of description", embed=True),
    type: DailyCheckProcedureOperationType = Body(
        ..., description="type of type", embed=True
    ),
    daily_check_procedure_id: str = Path(
        ..., description="daily check procedure id of daily check procedure id"
    ),
):
    reqId = RequestIdGenerator.generateId()
    producer = AppDi.instance.get(SimpleProducer)
    from src.port_adapter.messaging.common.model.ProjectCommand import ProjectCommand

    producer.produce(
        obj=ProjectCommand(
            id=reqId,
            name=CommandConstant.UPDATE_DAILY_CHECK_PROCEDURE_OPERATION.value,
            metadata=json.dumps({"token": Client.token}),
            data=json.dumps(
                {
                    "daily_check_procedure_operation_id": daily_check_procedure_operation_id,
                    "name": name,
                    "description": description,
                    "type": type,
                    "daily_check_procedure_id": daily_check_procedure_id,
                }
            ),
            external=[],
        ),
        schema=ProjectCommand.get_schema(),
    )
    return {"request_id": reqId}


@router.patch(
    "/{daily_check_procedure_id}/operations/{daily_check_procedure_operation_id}",
    summary="Partial update daily check procedure operation",
    status_code=status.HTTP_200_OK,
)
@OpenTelemetry.fastApiTraceOTel
async def partialUpdateDailyCheckProcedureOperation(
    *,
    _=Depends(CustomHttpBearer()),
    __=Depends(CustomAuthorization()),
    daily_check_procedure_id: str = Path(
        ..., description="daily check procedure id of daily check procedure id"
    ),
    daily_check_procedure_operation_id: str = Path(
        ...,
        description="daily check procedure operation id that is used in order to update the daily check procedure operation",
    ),
    name: str = Body(None, description="name of name", embed=True),
    description: str = Body(None, description="description of description", embed=True),
    type: DailyCheckProcedureOperationType = Body(
        None, description="type of type", embed=True
    ),
):
    reqId = RequestIdGenerator.generateId()
    producer = AppDi.instance.get(SimpleProducer)
    from src.port_adapter.messaging.common.model.ProjectCommand import ProjectCommand

    producer.produce(
        obj=ProjectCommand(
            id=reqId,
            name=CommandConstant.UPDATE_DAILY_CHECK_PROCEDURE_OPERATION.value,
            metadata=json.dumps({"token": Client.token}),
            data=json.dumps(
                {
                    "daily_check_procedure_operation_id": daily_check_procedure_operation_id,
                    "name": name,
                    "description": description,
                    "type": type,
                    "daily_check_procedure_id": daily_check_procedure_id,
                }
            ),
            external=[],
        ),
        schema=ProjectCommand.get_schema(),
    )
    return {"request_id": reqId}


# endregion

@router.get(path="/operations/labels/{daily_check_procedure_operation_label_id}", summary='Get daily check procedure operation label by id',
            response_model=DailyCheckProcedureOperationLabelDescriptor)
@OpenTelemetry.fastApiTraceOTel
async def getDailyCheckProcedureOperationLabelById(
    *,
    daily_check_procedure_operation_label_id: str = Path(
        ...,
        description='daily check procedure operation label id that is used to fetch daily check procedure operation label data',
    ),
    _=Depends(CustomHttpBearer()),
    _1=Depends(CustomAuthorization()),
):
    """Get a daily check procedure operation label by id
    """
    try:
        client = DailyCheckProcedureOperationLabelClient()
        return client.dailyCheckProcedureOperationLabelById(id=daily_check_procedure_operation_label_id)
    except grpc.RpcError as e:
        if e.code() == StatusCode.PERMISSION_DENIED:
            return Response(content=str(e), status_code=HTTP_403_FORBIDDEN)
        if e.code() == StatusCode.NOT_FOUND:
            return Response(content=str(e), status_code=HTTP_404_NOT_FOUND)
        else:
            logger.error(
                f'[{getDailyCheckProcedureOperationLabelById.__module__}.{getDailyCheckProcedureOperationLabelById.__qualname__}] - error response e: {e}')
            return Response(content=str(e), status_code=HTTP_500_INTERNAL_SERVER_ERROR)
    except Exception as e:
        logger.info(e)

@router.delete("/operations/labels/{daily_check_procedure_operation_label_id}", summary='Delete a daily check procedure operation labels', status_code=status.HTTP_200_OK)
@OpenTelemetry.fastApiTraceOTel
async def deleteDailyCheckProcedureOperationLabel(*,
    _=Depends(CustomHttpBearer()),
    _1=Depends(CustomAuthorization()),
    daily_check_procedure_operation_label_id: str = Path(
        ..., description='daily check procedure operation label id that is used in order to delete the daily check procedure operation label'
    ),
):
    reqId = RequestIdGenerator.generateId()
    producer = AppDi.instance.get(SimpleProducer)
    from src.port_adapter.messaging.common.model.ProjectCommand import ProjectCommand
    producer.produce(obj=ProjectCommand(id=reqId, name=CommandConstant.DELETE_DAILY_CHECK_PROCEDURE_OPERATION_LABEL.value,
                                        metadata=json.dumps({"token": Client.token}),
                                        data=json.dumps(
                                            {'daily_check_procedure_operation_label_id': daily_check_procedure_operation_label_id}),
                                        external=[]),
                     schema=ProjectCommand.get_schema())
    return {"request_id": reqId}

@router.get(path="/operations/{daily_check_procedure_operation_id}/labels", summary='Get all daily check procedure operation label(s)', response_model=DailyCheckProcedureOperationLabels)
@OpenTelemetry.fastApiTraceOTel
async def getDailyCheckProcedureOperationLabels(
    *,
    result_from: int = Query(0, description='Starting offset for fetching data'),
    result_size: int = Query(10, description='Item count to be fetched'),
    orders: str = Query('', description='e.g. id:asc,email:desc'),
    _=Depends(CustomHttpBearer()),
    _1=Depends(CustomAuthorization()),
):
    try:
        client = DailyCheckProcedureOperationLabelClient()
        orderService = AppDi.instance.get(OrderService)
        orders = orderService.orderStringToListOfDict(orders)
        return client.dailyCheckProcedureOperationLabels(resultFrom=result_from, resultSize=result_size, orders=orders)
    except grpc.RpcError as e:
        if e.code() == StatusCode.PERMISSION_DENIED:
            return Response(content=str(e), status_code=HTTP_403_FORBIDDEN)
        if e.code() == StatusCode.NOT_FOUND:
            return Response(content=str(e), status_code=HTTP_404_NOT_FOUND)
        else:
            logger.error(
                f'[{getDailyCheckProcedureOperationLabels.__module__}.{getDailyCheckProcedureOperationLabels.__qualname__}] - error response e: {e}')
            return Response(content=str(e), status_code=HTTP_500_INTERNAL_SERVER_ERROR)
    except Exception as e:
        logger.info(e)

@router.post("/operations/{daily_check_procedure_operation_id}/labels", summary='Create daily check procedure operation label', status_code=status.HTTP_200_OK)
@OpenTelemetry.fastApiTraceOTel
async def createDailyCheckProcedureOperationLabel(
    *,
    label: str = Body(..., description='label of daily check procedure operation label', embed=True),
    generate_alert: int = Body(..., description='generate alert of daily check procedure operation label', embed=True),
    daily_check_procedure_operation_id: str = Path(..., description='daily check procedure operation id of daily check procedure operation label'),
    _=Depends(CustomHttpBearer()),
    _1=Depends(CustomAuthorization()),
):
    reqId = RequestIdGenerator.generateId()
    producer = AppDi.instance.get(SimpleProducer)
    from src.port_adapter.messaging.common.model.ProjectCommand import ProjectCommand
    client = DailyCheckProcedureOperationLabelClient()
    producer.produce(obj=ProjectCommand(id=reqId, name=CommandConstant.CREATE_DAILY_CHECK_PROCEDURE_OPERATION_LABEL.value,
                                        metadata=json.dumps({"token": Client.token}),
                                        data=json.dumps(
                                            {
                                             'daily_check_procedure_operation_label_id': client.newId(),
                                             'label': label,
                                             'generate_alert': generate_alert,
                                             'daily_check_procedure_operation_id': daily_check_procedure_operation_id,
                                             }),
                                        external=[]),
                     schema=ProjectCommand.get_schema())
    return {"request_id": reqId}


@router.put("/operations/{daily_check_procedure_operation_id}/labels/{daily_check_procedure_operation_label_id}", summary='Update daily check procedure operation label', status_code=status.HTTP_200_OK)
@OpenTelemetry.fastApiTraceOTel
async def updateDailyCheckProcedureOperationLabel(*,
    _=Depends(CustomHttpBearer()),
    _1=Depends(CustomAuthorization()),
    daily_check_procedure_operation_label_id: str = Path(..., description='daily check procedure operation label id that is used in order to update the daily check procedure operation label'),
    label: str = Body(..., description='label of daily check procedure operation label', embed=True),
    generate_alert: int = Body(..., description='generate alert of daily check procedure operation label', embed=True),
    daily_check_procedure_operation_id: str = Path(..., description='daily check procedure operation id of daily check procedure operation label'),
):
    reqId = RequestIdGenerator.generateId()
    producer = AppDi.instance.get(SimpleProducer)
    from src.port_adapter.messaging.common.model.ProjectCommand import ProjectCommand
    producer.produce(obj=ProjectCommand(id=reqId, name=CommandConstant.UPDATE_DAILY_CHECK_PROCEDURE_OPERATION_LABEL.value,
                                        metadata=json.dumps({"token": Client.token}),
                                        data=json.dumps(
                                            {'daily_check_procedure_operation_label_id': daily_check_procedure_operation_label_id,
                                            'label': label,
                                            'generate_alert': generate_alert,
                                            'daily_check_procedure_operation_id': daily_check_procedure_operation_id,
                                             }),
                                        external=[]),
                     schema=ProjectCommand.get_schema())
    return {"request_id": reqId}


@router.patch("/operations/{daily_check_procedure_operation_id}/labels/{daily_check_procedure_operation_label_id}", summary='Partial update daily check procedure operation label', status_code=status.HTTP_200_OK)
@OpenTelemetry.fastApiTraceOTel
async def partialUpdateDailyCheckProcedureOperationLabel(*,
    _=Depends(CustomHttpBearer()),
    _1=Depends(CustomAuthorization()),
    daily_check_procedure_operation_label_id: str = Path(..., description='daily check procedure operation label id that is used in order to update the daily check procedure operation label'),
    label: str = Body(None, description='label of daily check procedure operation label', embed=True),
    generate_alert: int = Body(None, description='generate alert of daily check procedure operation label', embed=True),
    daily_check_procedure_operation_id: str = Path(..., description='daily check procedure operation id of daily check procedure operation label'),
):
    reqId = RequestIdGenerator.generateId()
    producer = AppDi.instance.get(SimpleProducer)
    from src.port_adapter.messaging.common.model.ProjectCommand import ProjectCommand
    producer.produce(obj=ProjectCommand(id=reqId, name=CommandConstant.UPDATE_DAILY_CHECK_PROCEDURE_OPERATION_LABEL.value,
                                        metadata=json.dumps({"token": Client.token}),
                                        data=json.dumps(
                                            {'daily_check_procedure_operation_label_id': daily_check_procedure_operation_label_id,
                                            'label': label,
                                            'generate_alert': generate_alert,
                                            'daily_check_procedure_operation_id': daily_check_procedure_operation_id,
                                            }),
                                        external=[]),
                     schema=ProjectCommand.get_schema())
    return {"request_id": reqId}
