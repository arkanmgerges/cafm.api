"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

import json
from uuid import uuid4

import grpc
from fastapi import APIRouter, Depends, Query, Body
from fastapi import Response
from fastapi.params import Path
from grpc.beta.interfaces import StatusCode
from starlette import status
from starlette.status import HTTP_404_NOT_FOUND, HTTP_500_INTERNAL_SERVER_ERROR, HTTP_403_FORBIDDEN

import src.port_adapter.AppDi as AppDi
from src.domain_model.OrderService import OrderService
from src.port_adapter.api.rest.grpc.Client import Client
from src.port_adapter.api.rest.grpc.v1.project.daily_check.procedure.operation.parameter.DailyCheckProcedureOperationParameterClient import DailyCheckProcedureOperationParameterClient
from src.port_adapter.api.rest.model.response.v1.project.daily_check.procedure.operation.parameter.DailyCheckProcedureOperationParameters import DailyCheckProcedureOperationParameters
from src.port_adapter.api.rest.model.response.v1.project.daily_check.procedure.operation.parameter.DailyCheckProcedureOperationParameter import DailyCheckProcedureOperationParameterDescriptor
from src.port_adapter.api.rest.router.v1.identity.auth import CustomHttpBearer
from src.port_adapter.messaging.common.SimpleProducer import SimpleProducer
from src.port_adapter.messaging.common.model.CommandConstant import CommandConstant
from src.resource.logging.logger import logger
from src.resource.logging.opentelemetry.OpenTelemetry import OpenTelemetry

router = APIRouter()




@router.get(path="/by_daily_check_procedure_operation_id/{daily_check_procedure_operation_id}", summary='Get all daily check procedure operation parameter by daily check procedure operation id', response_model=DailyCheckProcedureOperationParameters)
@OpenTelemetry.fastApiTraceOTel
async def getDailyCheckProcedureOperationParametersByDailyCheckProcedureOperationId(*,
                            daily_check_procedure_operation_id: str = Path(..., description='daily check procedure operation id that is used to fetch daily check procedure operation parameter data'),
                            result_from: int = Query(0, description='Starting offset for fetching data'),
                            result_size: int = Query(10, description='Item count to be fetched'),
                            order: str = Query('', description='e.g. id:asc,email:desc'),
                            _=Depends(CustomHttpBearer())):
    try:
        client = DailyCheckProcedureOperationParameterClient()
        orderService = AppDi.instance.get(OrderService)
        order = orderService.orderStringToListOfDict(order)
        return client.dailyCheckProcedureOperationParametersByDailyCheckProcedureOperationId(dailyCheckProcedureOperationId=daily_check_procedure_operation_id, resultFrom=result_from, resultSize=result_size, order=order)
    except grpc.RpcError as e:
        if e.code() == StatusCode.PERMISSION_DENIED:
            return Response(content=str(e), status_code=HTTP_403_FORBIDDEN)
        if e.code() == StatusCode.NOT_FOUND:
            return Response(content=str(e), status_code=HTTP_404_NOT_FOUND)
        else:
            logger.error(
                f'[{getDailyCheckProcedureOperationParametersByDailyCheckProcedureOperationId.__module__}.{getDailyCheckProcedureOperationParametersByDailyCheckProcedureOperationId.__qualname__}] - error response e: {e}')
            return Response(content=str(e), status_code=HTTP_500_INTERNAL_SERVER_ERROR)
    except Exception as e:
        logger.info(e)


@router.get(path="/{daily_check_procedure_id}/operations/{daily_check_procedure_operation_id}/parameters/{daily_check_procedure_operation_parameter_id}", summary='Get daily check procedure operation parameter by id',
            response_model=DailyCheckProcedureOperationParameterDescriptor)
@OpenTelemetry.fastApiTraceOTel
async def getDailyCheckProcedureOperationParameterById(*,
                                                       daily_check_procedure_id: str = Path(...,
                                                                                            description='daily check procedure id as a parent id of operation'),
                                                       daily_check_procedure_operation_id: str = Path(...,
                                                                                                      description='daily check procedure operation id as a parent id'),
                                                       daily_check_procedure_operation_parameter_id: str = Path(...,
                                                                description='daily check procedure operation parameter id that is used to fetch daily check procedure operation parameter data'),
                               _=Depends(CustomHttpBearer())):
    """Get a daily check procedure operation parameter by id
    """
    try:
        client = DailyCheckProcedureOperationParameterClient()
        return client.dailyCheckProcedureOperationParameterById(id=daily_check_procedure_operation_parameter_id)
    except grpc.RpcError as e:
        if e.code() == StatusCode.PERMISSION_DENIED:
            return Response(content=str(e), status_code=HTTP_403_FORBIDDEN)
        if e.code() == StatusCode.NOT_FOUND:
            return Response(content=str(e), status_code=HTTP_404_NOT_FOUND)
        else:
            logger.error(
                f'[{getDailyCheckProcedureOperationParameterById.__module__}.{getDailyCheckProcedureOperationParameterById.__qualname__}] - error response e: {e}')
            return Response(content=str(e), status_code=HTTP_500_INTERNAL_SERVER_ERROR)
    except Exception as e:
        logger.info(e)


@router.post("/{daily_check_procedure_id}/operations/{daily_check_procedure_operation_id}/parameters", summary='Create daily check procedure operation parameter', status_code=status.HTTP_200_OK)
@OpenTelemetry.fastApiTraceOTel
async def createDailyCheckProcedureOperationParameter(*, _=Depends(CustomHttpBearer()),
                                                      daily_check_procedure_id: str = Path(...,
                                                                                           description='daily check procedure id as a parent id of operation'),
                 name: str = Body(..., description='name of daily check procedure operation parameter', embed=True),
                 unit_id: str = Body(..., description='unit id of daily check procedure operation parameter', embed=True),
                 daily_check_procedure_operation_id: str = Path(..., description='daily check procedure operation id of daily check procedure operation parameter', embed=True),
                 min_value: float = Body(..., description='min value of daily check procedure operation parameter', embed=True),
                 max_value: float = Body(..., description='max value of daily check procedure operation parameter', embed=True),
                ):
    reqId = str(uuid4())
    producer = AppDi.instance.get(SimpleProducer)
    from src.port_adapter.messaging.common.model.ProjectCommand import ProjectCommand
    producer.produce(obj=ProjectCommand(id=reqId, name=CommandConstant.CREATE_DAILY_CHECK_PROCEDURE_OPERATION_PARAMETER.value,
                                        metadata=json.dumps({"token": Client.token}),
                                        data=json.dumps(
                                            {
                                             'name': name,
                                             'unit_id': unit_id,
                                             'daily_check_procedure_operation_id': daily_check_procedure_operation_id,
                                             'min_value': min_value,
                                             'max_value': max_value,
                                             }),
                                        external=[]),
                     schema=ProjectCommand.get_schema())
    return {"request_id": reqId}


@router.put("/{daily_check_procedure_id}/operations/{daily_check_procedure_operation_id}/parameters/{daily_check_procedure_operation_parameter_id}", summary='Update daily check procedure operation parameter', status_code=status.HTTP_200_OK)
@OpenTelemetry.fastApiTraceOTel
async def updateDailyCheckProcedureOperationParameter(*, _=Depends(CustomHttpBearer()),
                                                      daily_check_procedure_id: str = Path(...,
                                                                                           description='daily check procedure id as a parent id of operation'),
                 daily_check_procedure_operation_parameter_id: str = Path(..., description='daily check procedure operation parameter id that is used in order to update the daily check procedure operation parameter'),
                 name: str = Body(..., description='name of name', embed=True),
                 unit_id: str = Body(..., description='unit id of unit id', embed=True),
                 daily_check_procedure_operation_id: str = Path(..., description='daily check procedure operation id of daily check procedure operation id', embed=True),
                 min_value: float = Body(..., description='min value of min value', embed=True),
                 max_value: float = Body(..., description='max value of max value', embed=True),                 
                 ):
    reqId = str(uuid4())
    producer = AppDi.instance.get(SimpleProducer)
    from src.port_adapter.messaging.common.model.ProjectCommand import ProjectCommand
    producer.produce(obj=ProjectCommand(id=reqId, name=CommandConstant.UPDATE_DAILY_CHECK_PROCEDURE_OPERATION_PARAMETER.value,
                                        metadata=json.dumps({"token": Client.token}),
                                        data=json.dumps(
                                            {'daily_check_procedure_operation_parameter_id': daily_check_procedure_operation_parameter_id,
                                            'name': name,
                                            'unit_id': unit_id,
                                            'daily_check_procedure_operation_id': daily_check_procedure_operation_id,
                                            'min_value': min_value,
                                            'max_value': max_value,
                                             }),
                                        external=[]),
                     schema=ProjectCommand.get_schema())
    return {"request_id": reqId}


@router.patch("/{daily_check_procedure_id}/operations/{daily_check_procedure_operation_id}/parameters/{daily_check_procedure_operation_parameter_id}", summary='Partial update daily check procedure operation parameter', status_code=status.HTTP_200_OK)
@OpenTelemetry.fastApiTraceOTel
async def partialUpdateDailyCheckProcedureOperationParameter(*, _=Depends(CustomHttpBearer()),
                                                             daily_check_procedure_id: str = Path(...,
                                                                                                  description='daily check procedure id as a parent id of operation'),
                                                             daily_check_procedure_operation_id: str = Path(...,
                                                                                                            description='daily check procedure operation id of daily check procedure operation id'),
                        daily_check_procedure_operation_parameter_id: str = Path(..., description='daily check procedure operation parameter id that is used in order to update the daily check procedure operation parameter'),
                        name: str = Body(..., description='name of name', embed=True),
                        unit_id: str = Body(..., description='unit id of unit id', embed=True),
                        min_value: float = Body(..., description='min value of min value', embed=True),
                        max_value: float = Body(..., description='max value of max value', embed=True),
                        ):
    reqId = str(uuid4())
    producer = AppDi.instance.get(SimpleProducer)
    from src.port_adapter.messaging.common.model.ProjectCommand import ProjectCommand
    producer.produce(obj=ProjectCommand(id=reqId, name=CommandConstant.UPDATE_DAILY_CHECK_PROCEDURE_OPERATION_PARAMETER.value,
                                        metadata=json.dumps({"token": Client.token}),
                                        data=json.dumps(
                                            {'daily_check_procedure_operation_parameter_id': daily_check_procedure_operation_parameter_id,
                                            'name': name,
                                            'unit_id': unit_id,
                                            'daily_check_procedure_operation_id': daily_check_procedure_operation_id,
                                            'min_value': min_value,
                                            'max_value': max_value,
                                            }),
                                        external=[]),
                     schema=ProjectCommand.get_schema())
    return {"request_id": reqId}


@router.delete("/{daily_check_procedure_id}/operations/{daily_check_procedure_operation_id}/parameters/{daily_check_procedure_operation_parameter_id}", summary='Delete a daily check procedure operation parameters', status_code=status.HTTP_200_OK)
@OpenTelemetry.fastApiTraceOTel
async def deleteDailyCheckProcedureOperationParameter(*, _=Depends(CustomHttpBearer()),
                 daily_check_procedure_id: str = Path(..., description='daily check procedure id as a parent id of operation'),
                 daily_check_procedure_operation_id: str = Path(..., description='daily check procedure operation id of daily check procedure operation id'),
                                                      daily_check_procedure_operation_parameter_id: str = Path(..., description='daily check procedure operation parameter id that is used in order to delete the daily check procedure operation parameter'), ):
    reqId = str(uuid4())
    producer = AppDi.instance.get(SimpleProducer)
    from src.port_adapter.messaging.common.model.ProjectCommand import ProjectCommand
    producer.produce(obj=ProjectCommand(id=reqId, name=CommandConstant.DELETE_DAILY_CHECK_PROCEDURE_OPERATION_PARAMETER.value,
                                        metadata=json.dumps({"token": Client.token}),
                                        data=json.dumps(
                                            {'daily_check_procedure_operation_parameter_id': daily_check_procedure_operation_parameter_id}),
                                        external=[]),
                     schema=ProjectCommand.get_schema())
    return {"request_id": reqId}
