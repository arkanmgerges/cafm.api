"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""



import os
from typing import List, Any

import grpc

import src.port_adapter.AppDi as AppDi
from src.port_adapter.api.rest.grpc.Client import Client
from src.port_adapter.api.rest.model.response.v1.project.subcontractor.category.SubcontractorCategory import SubcontractorCategoryDescriptor
from src.port_adapter.api.rest.model.response.v1.project.subcontractor.category.SubcontractorCategories import SubcontractorCategories
from src.resource.logging.logger import logger
from src.resource.logging.opentelemetry.OpenTelemetry import OpenTelemetry
from src.resource.proto._generated.project.subcontractor_category_app_service_pb2 import \
    SubcontractorCategoryAppService_subcontractorCategoriesResponse, \
    SubcontractorCategoryAppService_subcontractorCategoriesRequest, SubcontractorCategoryAppService_subcontractorCategoryByIdRequest, \
    SubcontractorCategoryAppService_subcontractorCategoryByIdResponse, SubcontractorCategoryAppService_newIdResponse, \
    SubcontractorCategoryAppService_newIdRequest
from src.resource.proto._generated.project.subcontractor_category_app_service_pb2_grpc import SubcontractorCategoryAppServiceStub

class SubcontractorCategoryClient(Client):
    def __init__(self):
        self._server = os.getenv('CAFM_PROJECT_GRPC_SERVER_SERVICE', '')
        self._port = os.getenv('CAFM_PROJECT_GRPC_SERVER_SERVICE_PORT', '')

    @OpenTelemetry.grpcTraceOTel
    def newId(self) -> str:
        with grpc.insecure_channel(f'{self._server}:{self._port}') as channel:
            stub = SubcontractorCategoryAppServiceStub(channel)
            try:
                request = SubcontractorCategoryAppService_newIdRequest()
                response: SubcontractorCategoryAppService_newIdResponse = stub.newId.with_call(
                    request,
                    metadata=(('token', self.token), (
                        'opentel', AppDi.instance.get(OpenTelemetry).serializedContext(
                            SubcontractorCategoryClient.newId.__qualname__))))
                logger.debug(
                    f'[{SubcontractorCategoryClient.newId.__qualname__}] - grpc response: {response}')
                return response[0].id
            except Exception as e:
                channel.unsubscribe(lambda ch: ch.close())
                raise e

    @OpenTelemetry.grpcTraceOTel
    def subcontractorCategories(self, resultFrom: int = 0, resultSize: int = 10, order: List[dict] = None) -> SubcontractorCategories:
        order = [] if order is None else order
        with grpc.insecure_channel(f'{self._server}:{self._port}') as channel:
            stub = SubcontractorCategoryAppServiceStub(channel)
            try:
                logger.debug(
                    f'[{SubcontractorCategoryClient.subcontractorCategories.__qualname__}] - grpc call to retrieve subcontractorCategories from server {self._server}:{self._port}')
                request = SubcontractorCategoryAppService_subcontractorCategoriesRequest(resultFrom=resultFrom, resultSize=resultSize)
                [request.order.add(orderBy=o["orderBy"], direction=o["direction"]) for o in order]
                response: SubcontractorCategoryAppService_subcontractorCategoriesResponse = stub.subcontractorCategories.with_call(
                    request,
                    metadata=(('token', self.token), (
                        'opentel',
                        AppDi.instance.get(OpenTelemetry).serializedContext(
                            SubcontractorCategoryClient.subcontractorCategories.__qualname__)),))
                logger.debug(
                    f'[{SubcontractorCategoryClient.subcontractorCategories.__qualname__}] - grpc response: {response}')

                return SubcontractorCategories(subcontractor_categories=[self._descriptorByObject(obj=subcontractorCategory) for subcontractorCategory in
                                                    response[0].subcontractorCategories],
                                     item_count=response[0].itemCount)
            except Exception as e:
                channel.unsubscribe(lambda ch: ch.close())
                raise e

    @OpenTelemetry.grpcTraceOTel
    def subcontractorCategoryById(self, id) -> SubcontractorCategoryDescriptor:
        with grpc.insecure_channel(f'{self._server}:{self._port}') as channel:
            stub = SubcontractorCategoryAppServiceStub(channel)
            try:
                logger.debug(
                    f'[{SubcontractorCategoryClient.subcontractorCategoryById.__qualname__}] - grpc call to retrieve subcontractorCategory with subcontractorCategoryId: {id} from server {self._server}:{self._port}')
                response: SubcontractorCategoryAppService_subcontractorCategoryByIdResponse = stub.subcontractorCategoryById.with_call(
                    SubcontractorCategoryAppService_subcontractorCategoryByIdRequest(id=id),
                    metadata=(('token', self.token), (
                        'opentel', AppDi.instance.get(OpenTelemetry).serializedContext(
                            SubcontractorCategoryClient.subcontractorCategoryById.__qualname__))))
                logger.debug(
                    f'[{SubcontractorCategoryClient.subcontractorCategoryById.__qualname__}] - grpc response: {response}')
                subcontractorCategory = response[0].subcontractorCategory
                return self._descriptorByObject(obj=subcontractorCategory)
            except Exception as e:
                channel.unsubscribe(lambda ch: ch.close())
                raise e

    def _descriptorByObject(self, obj: Any) -> SubcontractorCategoryDescriptor:
        return SubcontractorCategoryDescriptor(id=obj.id,
                                      name=obj.name,
                                      )
