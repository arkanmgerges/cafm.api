"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""


import os
from typing import List, Any

import grpc

import src.port_adapter.AppDi as AppDi
from src.port_adapter.api.rest.grpc.Client import Client
from src.port_adapter.api.rest.model.response.v1.project.subcontractor.Subcontractor import (
    SubcontractorDescriptor,
)
from src.port_adapter.api.rest.model.response.v1.project.subcontractor.Subcontractors import (
    Subcontractors,
)
from src.resource.logging.logger import logger
from src.resource.logging.opentelemetry.OpenTelemetry import OpenTelemetry
from src.resource.proto._generated.project.subcontractor_app_service_pb2 import (
    SubcontractorAppService_subcontractorsByOrganizationIdResponse,
    SubcontractorAppService_subcontractorsByOrganizationIdRequest,
    SubcontractorAppService_subcontractorsResponse,
    SubcontractorAppService_subcontractorsRequest,
    SubcontractorAppService_subcontractorByIdResponse,
    SubcontractorAppService_subcontractorByIdRequest,
    SubcontractorAppService_newIdResponse,
    SubcontractorAppService_newIdRequest,
)
from src.resource.proto._generated.project.subcontractor_app_service_pb2_grpc import (
    SubcontractorAppServiceStub,
)
from src.resource.proto._generated.project.subcontractor_app_service_pb2 import (
    SubcontractorAppService_subcontractorsBySubcontractorCategoryIdRequest,
)
from src.resource.proto._generated.project.subcontractor_app_service_pb2 import (
    SubcontractorAppService_subcontractorsBySubcontractorCategoryIdResponse,
)


class SubcontractorClient(Client):
    def __init__(self):
        self._server = os.getenv("CAFM_PROJECT_GRPC_SERVER_SERVICE", "")
        self._port = os.getenv("CAFM_PROJECT_GRPC_SERVER_SERVICE_PORT", "")

    @OpenTelemetry.grpcTraceOTel
    def newId(self) -> str:
        with grpc.insecure_channel(f"{self._server}:{self._port}") as channel:
            stub = SubcontractorAppServiceStub(channel)
            try:
                request = SubcontractorAppService_newIdRequest()
                response: SubcontractorAppService_newIdResponse = stub.new_id.with_call(
                    request,
                    metadata=(
                        ("token", self.token),
                        (
                            "opentel",
                            AppDi.instance.get(OpenTelemetry).serializedContext(
                                SubcontractorClient.newId.__qualname__
                            ),
                        ),
                    ),
                )
                logger.debug(
                    f"[{SubcontractorClient.newId.__qualname__}] - grpc response: {response}"
                )
                return response[0].id
            except Exception as e:
                channel.unsubscribe(lambda ch: ch.close())
                raise e

    @OpenTelemetry.grpcTraceOTel
    def subcontractors(
        self, resultFrom: int = 0, resultSize: int = 10, orders: List[dict] = None
    ) -> Subcontractors:
        orders = [] if orders is None else orders
        with grpc.insecure_channel(f"{self._server}:{self._port}") as channel:
            stub = SubcontractorAppServiceStub(channel)
            try:
                logger.debug(
                    f"[{SubcontractorClient.subcontractors.__qualname__}] - grpc call to retrieve subcontractors from server {self._server}:{self._port}"
                )
                request = SubcontractorAppService_subcontractorsRequest(
                    result_from=resultFrom, result_size=resultSize
                )
                [
                    request.orders.add(order_by=o["orderBy"], direction=o["direction"])
                    for o in orders
                ]
                response: SubcontractorAppService_subcontractorsResponse = (
                    stub.subcontractors.with_call(
                        request,
                        metadata=(
                            ("token", self.token),
                            (
                                "opentel",
                                AppDi.instance.get(OpenTelemetry).serializedContext(
                                    SubcontractorClient.subcontractors.__qualname__
                                ),
                            ),
                        ),
                    )
                )
                logger.debug(
                    f"[{SubcontractorClient.subcontractors.__qualname__}] - grpc response: {response}"
                )

                return Subcontractors(
                    subcontractors=[
                        self._descriptorByObject(obj=subcontractor)
                        for subcontractor in response[0].subcontractors
                    ],
                    total_item_count=response[0].total_item_count,
                )
            except Exception as e:
                channel.unsubscribe(lambda ch: ch.close())
                raise e

    @OpenTelemetry.grpcTraceOTel
    def subcontractorById(self, id) -> SubcontractorDescriptor:
        with grpc.insecure_channel(f"{self._server}:{self._port}") as channel:
            stub = SubcontractorAppServiceStub(channel)
            try:
                logger.debug(
                    f"[{SubcontractorClient.subcontractorById.__qualname__}] - grpc call to retrieve subcontractor with subcontractorId: {id} from server {self._server}:{self._port}"
                )
                response: SubcontractorAppService_subcontractorByIdResponse = (
                    stub.subcontractor_by_id.with_call(
                        SubcontractorAppService_subcontractorByIdRequest(id=id),
                        metadata=(
                            ("token", self.token),
                            (
                                "opentel",
                                AppDi.instance.get(OpenTelemetry).serializedContext(
                                    SubcontractorClient.subcontractorById.__qualname__
                                ),
                            ),
                        ),
                    )
                )
                logger.debug(
                    f"[{SubcontractorClient.subcontractorById.__qualname__}] - grpc response: {response}"
                )
                subcontractor = response[0].subcontractor
                return self._descriptorByObject(obj=subcontractor)
            except Exception as e:
                channel.unsubscribe(lambda ch: ch.close())
                raise e

    @OpenTelemetry.grpcTraceOTel
    def subcontractorsByOrganizationId(
        self,
        organizationId: str = None,
        resultFrom: int = 0,
        resultSize: int = 10,
        orders: List[dict] = None,
    ) -> Subcontractors:
        orders = [] if orders is None else orders
        with grpc.insecure_channel(f"{self._server}:{self._port}") as channel:
            stub = SubcontractorAppServiceStub(channel)
            try:
                logger.debug(
                    f"[{SubcontractorClient.subcontractorsByOrganizationId.__qualname__}] - grpc call to retrieve subcontractors by organization id from server {self._server}:{self._port}"
                )
                request = SubcontractorAppService_subcontractorsByOrganizationIdRequest(
                    organization_id=organizationId,
                    result_from=resultFrom,
                    result_size=resultSize,
                )
                [
                    request.orders.add(order_by=o["orderBy"], direction=o["direction"])
                    for o in orders
                ]
                response: SubcontractorAppService_subcontractorsByOrganizationIdResponse = stub.subcontractors_by_organization_id.with_call(
                    request,
                    metadata=(
                        ("token", self.token),
                        (
                            "opentel",
                            AppDi.instance.get(OpenTelemetry).serializedContext(
                                SubcontractorClient.subcontractorsByOrganizationId.__qualname__
                            ),
                        ),
                    ),
                )
                logger.debug(
                    f"[{SubcontractorClient.subcontractorsByOrganizationId.__qualname__}] - grpc response: {response}"
                )

                return Subcontractors(
                    subcontractors=[
                        self._descriptorByObject(obj=subcontractor)
                        for subcontractor in response[0].subcontractors
                    ],
                    total_item_count=response[0].total_item_count,
                )
            except Exception as e:
                channel.unsubscribe(lambda ch: ch.close())
                raise e

    @OpenTelemetry.grpcTraceOTel
    def subcontractorsBySubcontractorCategoryId(
        self,
        subcontractorCategoryId: str = None,
        resultFrom: int = 0,
        resultSize: int = 10,
        orders: List[dict] = None,
    ) -> Subcontractors:
        orders = [] if orders is None else orders
        with grpc.insecure_channel(f"{self._server}:{self._port}") as channel:
            stub = SubcontractorAppServiceStub(channel)
            try:
                logger.debug(
                    f"[{SubcontractorClient.subcontractorsBySubcontractorCategoryId.__qualname__}] - grpc call to retrieve subcontractors from server {self._server}:{self._port}"
                )
                request = SubcontractorAppService_subcontractorsBySubcontractorCategoryIdRequest(
                    subcontractor_category_id=subcontractorCategoryId,
                    result_from=resultFrom,
                    result_size=resultSize,
                )
                [
                    request.orders.add(order_by=o["orderBy"], direction=o["direction"])
                    for o in orders
                ]
                response: SubcontractorAppService_subcontractorsBySubcontractorCategoryIdResponse = stub.subcontractors_by_subcontractor_category_id.with_call(
                    request,
                    metadata=(
                        ("token", self.token),
                        (
                            "opentel",
                            AppDi.instance.get(OpenTelemetry).serializedContext(
                                SubcontractorClient.subcontractorsBySubcontractorCategoryId.__qualname__
                            ),
                        ),
                    ),
                )
                logger.debug(
                    f"[{SubcontractorClient.subcontractorsBySubcontractorCategoryId.__qualname__}] - grpc response: {response}"
                )

                return Subcontractors(
                    subcontractors=[
                        self._descriptorByObject(obj=subcontractor)
                        for subcontractor in response[0].subcontractors
                    ],
                    total_item_count=response[0].total_item_count,
                )
            except Exception as e:
                channel.unsubscribe(lambda ch: ch.close())
                raise e

    def _descriptorByObject(self, obj: Any) -> SubcontractorDescriptor:
        return SubcontractorDescriptor(
            id=obj.id,
            company_name=obj.company_name,
            website_url=obj.website_url,
            contact_person=obj.contact_person,
            email=obj.email,
            phone_number=obj.phone_number,
            address_one=obj.address_one,
            address_two=obj.address_two,
            subcontractor_category_id=obj.subcontractor_category_id,
            description=obj.description,
            country_id=obj.country_id,
            city_id=obj.city_id,
            state_id=obj.state_id,
            postal_code=obj.postal_code,
        )
