"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""


import os
from typing import List, Any

import grpc

import src.port_adapter.AppDi as AppDi
from src.port_adapter.api.rest.grpc.Client import Client
from src.port_adapter.api.rest.model.response.v1.project.manufacturer.Manufacturer import (
    ManufacturerDescriptor,
)
from src.port_adapter.api.rest.model.response.v1.project.manufacturer.Manufacturers import (
    Manufacturers,
)
from src.resource.logging.logger import logger
from src.resource.logging.opentelemetry.OpenTelemetry import OpenTelemetry
from src.resource.proto._generated.project.manufacturer_app_service_pb2 import (
    ManufacturerAppService_manufacturersResponse,
    ManufacturerAppService_manufacturersRequest,
    ManufacturerAppService_manufacturerByIdRequest,
    ManufacturerAppService_manufacturerByIdResponse,
    ManufacturerAppService_newIdRequest,
    ManufacturerAppService_newIdResponse,
)
from src.resource.proto._generated.project.manufacturer_app_service_pb2_grpc import (
    ManufacturerAppServiceStub,
)


class ManufacturerClient(Client):
    def __init__(self):
        self._server = os.getenv("CAFM_PROJECT_GRPC_SERVER_SERVICE", "")
        self._port = os.getenv("CAFM_PROJECT_GRPC_SERVER_SERVICE_PORT", "")

    @OpenTelemetry.grpcTraceOTel
    def newId(self) -> str:
        with grpc.insecure_channel(f"{self._server}:{self._port}") as channel:
            stub = ManufacturerAppServiceStub(channel)
            try:
                request = ManufacturerAppService_newIdRequest()
                response: ManufacturerAppService_newIdResponse = stub.new_id.with_call(
                    request,
                    metadata=(
                        ("token", self.token),
                        (
                            "opentel",
                            AppDi.instance.get(OpenTelemetry).serializedContext(
                                ManufacturerClient.newId.__qualname__
                            ),
                        ),
                    ),
                )
                logger.debug(
                    f"[{ManufacturerClient.newId.__qualname__}] - grpc response: {response}"
                )
                return response[0].id
            except Exception as e:
                channel.unsubscribe(lambda ch: ch.close())
                raise e

    @OpenTelemetry.grpcTraceOTel
    def manufacturers(
        self, resultFrom: int = 0, resultSize: int = 10, orders: List[dict] = None
    ) -> Manufacturers:
        orders = [] if orders is None else orders
        with grpc.insecure_channel(f"{self._server}:{self._port}") as channel:
            stub = ManufacturerAppServiceStub(channel)
            try:
                logger.debug(
                    f"[{ManufacturerClient.manufacturers.__qualname__}] - grpc call to retrieve manufacturers from server {self._server}:{self._port}"
                )
                request = ManufacturerAppService_manufacturersRequest(
                    result_from=resultFrom, result_size=resultSize
                )
                [
                    request.orders.add(order_by=o["orderBy"], direction=o["direction"])
                    for o in orders
                ]
                response: ManufacturerAppService_manufacturersResponse = (
                    stub.manufacturers.with_call(
                        request,
                        metadata=(
                            ("token", self.token),
                            (
                                "opentel",
                                AppDi.instance.get(OpenTelemetry).serializedContext(
                                    ManufacturerClient.manufacturers.__qualname__
                                ),
                            ),
                        ),
                    )
                )
                logger.debug(
                    f"[{ManufacturerClient.manufacturers.__qualname__}] - grpc response: {response}"
                )

                return Manufacturers(
                    manufacturers=[
                        self._descriptorByObject(obj=manufacturer)
                        for manufacturer in response[0].manufacturers
                    ],
                    total_item_count=response[0].total_item_count,
                )
            except Exception as e:
                channel.unsubscribe(lambda ch: ch.close())
                raise e

    @OpenTelemetry.grpcTraceOTel
    def manufacturerById(self, id) -> ManufacturerDescriptor:
        with grpc.insecure_channel(f"{self._server}:{self._port}") as channel:
            stub = ManufacturerAppServiceStub(channel)
            try:
                logger.debug(
                    f"[{ManufacturerClient.manufacturerById.__qualname__}] - grpc call to retrieve manufacturer with manufacturerId: {id} from server {self._server}:{self._port}"
                )
                response: ManufacturerAppService_manufacturerByIdResponse = (
                    stub.manufacturer_by_id.with_call(
                        ManufacturerAppService_manufacturerByIdRequest(id=id),
                        metadata=(
                            ("token", self.token),
                            (
                                "opentel",
                                AppDi.instance.get(OpenTelemetry).serializedContext(
                                    ManufacturerClient.manufacturers.__qualname__
                                ),
                            ),
                        ),
                    )
                )
                logger.debug(
                    f"[{ManufacturerClient.manufacturerById.__qualname__}] - grpc response: {response}"
                )
                manufacturer = response[0].manufacturer
                return self._descriptorByObject(obj=manufacturer)
            except Exception as e:
                channel.unsubscribe(lambda ch: ch.close())
                raise e

    def _descriptorByObject(self, obj: Any) -> ManufacturerDescriptor:
        return ManufacturerDescriptor(
            id=obj.id,
            name=obj.name,
        )
