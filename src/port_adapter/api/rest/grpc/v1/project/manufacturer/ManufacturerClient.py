"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""



import os
from typing import List, Any

import grpc

import src.port_adapter.AppDi as AppDi
from src.port_adapter.api.rest.grpc.Client import Client
from src.port_adapter.api.rest.model.response.v1.project.manufacturer.Manufacturer import ManufacturerDescriptor
from src.port_adapter.api.rest.model.response.v1.project.manufacturer.Manufacturers import Manufacturers
from src.resource.logging.logger import logger
from src.resource.logging.opentelemetry.OpenTelemetry import OpenTelemetry
from src.resource.proto._generated.project.manufacturer_app_service_pb2 import \
    ManufacturerAppService_manufacturersResponse, \
    ManufacturerAppService_manufacturersRequest, ManufacturerAppService_manufacturerByIdRequest, \
    ManufacturerAppService_manufacturerByIdResponse
from src.resource.proto._generated.project.manufacturer_app_service_pb2_grpc import ManufacturerAppServiceStub


class ManufacturerClient(Client):
    def __init__(self):
        self._server = os.getenv('CAFM_PROJECT_GRPC_SERVER_SERVICE', '')
        self._port = os.getenv('CAFM_PROJECT_GRPC_SERVER_SERVICE_PORT', '')

    @OpenTelemetry.grpcTraceOTel
    def manufacturers(self, resultFrom: int = 0, resultSize: int = 10, order: List[dict] = None) -> Manufacturers:
        order = [] if order is None else order
        with grpc.insecure_channel(f'{self._server}:{self._port}') as channel:
            stub = ManufacturerAppServiceStub(channel)
            try:
                logger.debug(
                    f'[{ManufacturerClient.manufacturers.__qualname__}] - grpc call to retrieve manufacturers from server {self._server}:{self._port}')
                request = ManufacturerAppService_manufacturersRequest(resultFrom=resultFrom, resultSize=resultSize)
                [request.order.add(orderBy=o["orderBy"], direction=o["direction"]) for o in order]
                response: ManufacturerAppService_manufacturersResponse = stub.manufacturers.with_call(
                    request,
                    metadata=(('token', self.token), (
                        'opentel',
                        AppDi.instance.get(OpenTelemetry).serializedContext(
                            ManufacturerClient.manufacturers.__qualname__)),))
                logger.debug(
                    f'[{ManufacturerClient.manufacturers.__qualname__}] - grpc response: {response}')

                return Manufacturers(manufacturers=[self._descriptorByObject(obj=manufacturer) for manufacturer in
                                                    response[0].manufacturers],
                                     item_count=response[0].itemCount)
            except Exception as e:
                channel.unsubscribe(lambda ch: ch.close())
                raise e

    @OpenTelemetry.grpcTraceOTel
    def manufacturerById(self, id) -> ManufacturerDescriptor:
        with grpc.insecure_channel(f'{self._server}:{self._port}') as channel:
            stub = ManufacturerAppServiceStub(channel)
            try:
                logger.debug(
                    f'[{ManufacturerClient.manufacturerById.__qualname__}] - grpc call to retrieve manufacturer with manufacturerId: {id} from server {self._server}:{self._port}')
                response: ManufacturerAppService_manufacturerByIdResponse = stub.manufacturerById.with_call(
                    ManufacturerAppService_manufacturerByIdRequest(id=id),
                    metadata=(('token', self.token), (
                        'opentel', AppDi.instance.get(OpenTelemetry).serializedContext(
                            ManufacturerClient.manufacturers.__qualname__))))
                logger.debug(
                    f'[{ManufacturerClient.manufacturerById.__qualname__}] - grpc response: {response}')
                manufacturer = response[0].manufacturer
                return self._descriptorByObject(obj=manufacturer)
            except Exception as e:
                channel.unsubscribe(lambda ch: ch.close())
                raise e

    def _descriptorByObject(self, obj: Any) -> ManufacturerDescriptor:
        return ManufacturerDescriptor(id=obj.id,
                                      name=obj.name,
                                      )
