"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""



import os
from typing import List, Any

import grpc

import src.port_adapter.AppDi as AppDi
from src.port_adapter.api.rest.grpc.Client import Client
from src.port_adapter.api.rest.model.response.v1.project.daily_check.procedure.DailyCheckProcedureOperationLabel import DailyCheckProcedureOperationLabelDescriptor
from src.port_adapter.api.rest.model.response.v1.project.daily_check.procedure.DailyCheckProcedureOperationLabels import DailyCheckProcedureOperationLabels
from src.resource.logging.logger import logger
from src.resource.logging.opentelemetry.OpenTelemetry import OpenTelemetry
from src.resource.proto._generated.project.daily_check_procedure_operation_label_app_service_pb2 import \
    DailyCheckProcedureOperationLabelAppService_dailyCheckProcedureOperationLabelsResponse, \
    DailyCheckProcedureOperationLabelAppService_dailyCheckProcedureOperationLabelsRequest, DailyCheckProcedureOperationLabelAppService_dailyCheckProcedureOperationLabelByIdRequest, \
    DailyCheckProcedureOperationLabelAppService_dailyCheckProcedureOperationLabelByIdResponse, DailyCheckProcedureOperationLabelAppService_newIdResponse, \
    DailyCheckProcedureOperationLabelAppService_newIdRequest
from src.resource.proto._generated.project.daily_check_procedure_operation_label_app_service_pb2_grpc import DailyCheckProcedureOperationLabelAppServiceStub

class DailyCheckProcedureOperationLabelClient(Client):
    def __init__(self):
        self._server = os.getenv('CAFM_PROJECT_GRPC_SERVER_SERVICE', '')
        self._port = os.getenv('CAFM_PROJECT_GRPC_SERVER_SERVICE_PORT', '')

    @OpenTelemetry.grpcTraceOTel
    def newId(self) -> str:
        with grpc.insecure_channel(f'{self._server}:{self._port}') as channel:
            stub = DailyCheckProcedureOperationLabelAppServiceStub(channel)
            try:
                request = DailyCheckProcedureOperationLabelAppService_newIdRequest()
                response: DailyCheckProcedureOperationLabelAppService_newIdResponse = stub.new_id.with_call(
                    request,
                    metadata=(('token', self.token), (
                        'opentel', AppDi.instance.get(OpenTelemetry).serializedContext(
                            DailyCheckProcedureOperationLabelClient.newId.__qualname__))))
                logger.debug(
                    f'[{DailyCheckProcedureOperationLabelClient.newId.__qualname__}] - grpc response: {response}')
                return response[0].id
            except Exception as e:
                channel.unsubscribe(lambda ch: ch.close())
                raise e

    @OpenTelemetry.grpcTraceOTel
    def dailyCheckProcedureOperationLabels(self, resultFrom: int = 0, resultSize: int = 10, orders: List[dict] = None) -> DailyCheckProcedureOperationLabels:
        orders = [] if orders is None else orders
        with grpc.insecure_channel(f'{self._server}:{self._port}') as channel:
            stub = DailyCheckProcedureOperationLabelAppServiceStub(channel)
            try:
                logger.debug(
                    f'[{DailyCheckProcedureOperationLabelClient.dailyCheckProcedureOperationLabels.__qualname__}] - grpc call to retrieve dailyCheckProcedureOperationLabels from server {self._server}:{self._port}')
                request = DailyCheckProcedureOperationLabelAppService_dailyCheckProcedureOperationLabelsRequest(result_from=resultFrom, result_size=resultSize)
                [request.orders.add(order_by=o["orderBy"], direction=o["direction"]) for o in orders]
                response: DailyCheckProcedureOperationLabelAppService_dailyCheckProcedureOperationLabelsResponse = stub.daily_check_procedure_operation_labels.with_call(
                    request,
                    metadata=(('token', self.token), (
                        'opentel',
                        AppDi.instance.get(OpenTelemetry).serializedContext(
                            DailyCheckProcedureOperationLabelClient.dailyCheckProcedureOperationLabels.__qualname__)),))
                logger.debug(
                    f'[{DailyCheckProcedureOperationLabelClient.dailyCheckProcedureOperationLabels.__qualname__}] - grpc response: {response}')

                return DailyCheckProcedureOperationLabels(daily_check_procedure_operation_labels=[self._descriptorByObject(obj=dailyCheckProcedureOperationLabel) for dailyCheckProcedureOperationLabel in
                                                    response[0].daily_check_procedure_operation_labels],
                                     total_item_count=response[0].total_item_count)
            except Exception as e:
                channel.unsubscribe(lambda ch: ch.close())
                raise e

    @OpenTelemetry.grpcTraceOTel
    def dailyCheckProcedureOperationLabelById(self, id) -> DailyCheckProcedureOperationLabelDescriptor:
        with grpc.insecure_channel(f'{self._server}:{self._port}') as channel:
            stub = DailyCheckProcedureOperationLabelAppServiceStub(channel)
            try:
                logger.debug(
                    f'[{DailyCheckProcedureOperationLabelClient.dailyCheckProcedureOperationLabelById.__qualname__}] - grpc call to retrieve dailyCheckProcedureOperationLabel with dailyCheckProcedureOperationLabelId: {id} from server {self._server}:{self._port}')
                response: DailyCheckProcedureOperationLabelAppService_dailyCheckProcedureOperationLabelByIdResponse = stub.daily_check_procedure_operation_label_by_id.with_call(
                    DailyCheckProcedureOperationLabelAppService_dailyCheckProcedureOperationLabelByIdRequest(id=id),
                    metadata=(('token', self.token), (
                        'opentel', AppDi.instance.get(OpenTelemetry).serializedContext(
                            DailyCheckProcedureOperationLabelClient.dailyCheckProcedureOperationLabelById.__qualname__))))
                logger.debug(
                    f'[{DailyCheckProcedureOperationLabelClient.dailyCheckProcedureOperationLabelById.__qualname__}] - grpc response: {response}')
                dailyCheckProcedureOperationLabel = response[0].daily_check_procedure_operation_label
                return self._descriptorByObject(obj=dailyCheckProcedureOperationLabel)
            except Exception as e:
                channel.unsubscribe(lambda ch: ch.close())
                raise e

    def _descriptorByObject(self, obj: Any) -> DailyCheckProcedureOperationLabelDescriptor:
        return DailyCheckProcedureOperationLabelDescriptor(id=obj.id,
                                      label=obj.label,
                                      generate_alert=obj.generate_alert,
                                      daily_check_procedure_operation_id=obj.daily_check_procedure_operation_id,
                                      )
