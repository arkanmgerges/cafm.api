"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""


import os
from typing import List, Any

import grpc

import src.port_adapter.AppDi as AppDi
from src.port_adapter.api.rest.grpc.Client import Client
from src.port_adapter.api.rest.model.response.v1.project.standard_equipment.standard_project.standard_category.StandardEquipmentProjectCategory import (
    StandardEquipmentProjectCategoryDescriptor,
)
from src.port_adapter.api.rest.model.response.v1.project.standard_equipment.standard_project.standard_category.StandardEquipmentProjectCategories import (
    StandardEquipmentProjectCategories,
)
from src.resource.logging.logger import logger
from src.resource.logging.opentelemetry.OpenTelemetry import OpenTelemetry
from src.resource.proto._generated.project.standard_equipment_project_category_app_service_pb2 import (
    StandardEquipmentProjectCategoryAppService_standardEquipmentProjectCategoriesResponse,
    StandardEquipmentProjectCategoryAppService_standardEquipmentProjectCategoriesRequest,
    StandardEquipmentProjectCategoryAppService_standardEquipmentProjectCategoryByIdRequest,
    StandardEquipmentProjectCategoryAppService_standardEquipmentProjectCategoryByIdResponse,
    StandardEquipmentProjectCategoryAppService_newIdResponse,
    StandardEquipmentProjectCategoryAppService_newIdRequest,
)
from src.resource.proto._generated.project.standard_equipment_project_category_app_service_pb2_grpc import (
    StandardEquipmentProjectCategoryAppServiceStub,
)
from src.resource.proto._generated.project.standard_equipment_project_category_app_service_pb2 import (
    StandardEquipmentProjectCategoryAppService_standardEquipmentProjectCategoriesByOrganizationIdRequest,
)
from src.resource.proto._generated.project.standard_equipment_project_category_app_service_pb2 import (
    StandardEquipmentProjectCategoryAppService_standardEquipmentProjectCategoriesByOrganizationIdResponse,
)


class StandardEquipmentProjectCategoryClient(Client):
    def __init__(self):
        self._server = os.getenv("CAFM_PROJECT_GRPC_SERVER_SERVICE", "")
        self._port = os.getenv("CAFM_PROJECT_GRPC_SERVER_SERVICE_PORT", "")

    @OpenTelemetry.grpcTraceOTel
    def newId(self) -> str:
        with grpc.insecure_channel(f"{self._server}:{self._port}") as channel:
            stub = StandardEquipmentProjectCategoryAppServiceStub(channel)
            try:
                request = StandardEquipmentProjectCategoryAppService_newIdRequest()
                response: StandardEquipmentProjectCategoryAppService_newIdResponse = stub.new_id.with_call(
                    request,
                    metadata=(
                        ("token", self.token),
                        (
                            "opentel",
                            AppDi.instance.get(OpenTelemetry).serializedContext(
                                StandardEquipmentProjectCategoryClient.newId.__qualname__
                            ),
                        ),
                    ),
                )
                logger.debug(
                    f"[{StandardEquipmentProjectCategoryClient.newId.__qualname__}] - grpc response: {response}"
                )
                return response[0].id
            except Exception as e:
                channel.unsubscribe(lambda ch: ch.close())
                raise e

    @OpenTelemetry.grpcTraceOTel
    def standardEquipmentProjectCategories(
        self, resultFrom: int = 0, resultSize: int = 10, orders: List[dict] = None
    ) -> StandardEquipmentProjectCategories:
        orders = [] if orders is None else orders
        with grpc.insecure_channel(f"{self._server}:{self._port}") as channel:
            stub = StandardEquipmentProjectCategoryAppServiceStub(channel)
            try:
                logger.debug(
                    f"[{StandardEquipmentProjectCategoryClient.standardEquipmentProjectCategories.__qualname__}] - grpc call to retrieve standardEquipmentProjectCategories from server {self._server}:{self._port}"
                )
                request = StandardEquipmentProjectCategoryAppService_standardEquipmentProjectCategoriesRequest(
                    result_from=resultFrom, result_size=resultSize
                )
                [
                    request.orders.add(order_by=o["orderBy"], direction=o["direction"])
                    for o in orders
                ]
                response: StandardEquipmentProjectCategoryAppService_standardEquipmentProjectCategoriesResponse = stub.standard_equipment_project_categories.with_call(
                    request,
                    metadata=(
                        ("token", self.token),
                        (
                            "opentel",
                            AppDi.instance.get(OpenTelemetry).serializedContext(
                                StandardEquipmentProjectCategoryClient.standardEquipmentProjectCategories.__qualname__
                            ),
                        ),
                    ),
                )
                logger.debug(
                    f"[{StandardEquipmentProjectCategoryClient.standardEquipmentProjectCategories.__qualname__}] - grpc response: {response}"
                )

                return StandardEquipmentProjectCategories(
                    standard_equipment_project_categories=[
                        self._descriptorByObject(obj=standardEquipmentProjectCategory)
                        for standardEquipmentProjectCategory in response[
                            0
                        ].standard_equipment_project_categories
                    ],
                    total_item_count=response[0].total_item_count,
                )
            except Exception as e:
                channel.unsubscribe(lambda ch: ch.close())
                raise e

    @OpenTelemetry.grpcTraceOTel
    def standardEquipmentProjectCategoryById(
        self, id
    ) -> StandardEquipmentProjectCategoryDescriptor:
        with grpc.insecure_channel(f"{self._server}:{self._port}") as channel:
            stub = StandardEquipmentProjectCategoryAppServiceStub(channel)
            try:
                logger.debug(
                    f"[{StandardEquipmentProjectCategoryClient.standardEquipmentProjectCategoryById.__qualname__}] - grpc call to retrieve standardEquipmentProjectCategory with standardEquipmentProjectCategoryId: {id} from server {self._server}:{self._port}"
                )
                response: StandardEquipmentProjectCategoryAppService_standardEquipmentProjectCategoryByIdResponse = stub.standard_equipment_project_category_by_id.with_call(
                    StandardEquipmentProjectCategoryAppService_standardEquipmentProjectCategoryByIdRequest(
                        id=id
                    ),
                    metadata=(
                        ("token", self.token),
                        (
                            "opentel",
                            AppDi.instance.get(OpenTelemetry).serializedContext(
                                StandardEquipmentProjectCategoryClient.standardEquipmentProjectCategoryById.__qualname__
                            ),
                        ),
                    ),
                )
                logger.debug(
                    f"[{StandardEquipmentProjectCategoryClient.standardEquipmentProjectCategoryById.__qualname__}] - grpc response: {response}"
                )
                standardEquipmentProjectCategory = response[
                    0
                ].standard_equipment_project_category
                return self._descriptorByObject(obj=standardEquipmentProjectCategory)
            except Exception as e:
                channel.unsubscribe(lambda ch: ch.close())
                raise e

    @OpenTelemetry.grpcTraceOTel
    def standardEquipmentProjectCategoriesByOrganizationId(
        self,
        organizationId: str = None,
        resultFrom: int = 0,
        resultSize: int = 10,
        order: List[dict] = None,
    ) -> StandardEquipmentProjectCategories:
        orders = [] if orders is None else orders
        with grpc.insecure_channel(f"{self._server}:{self._port}") as channel:
            stub = StandardEquipmentProjectCategoryAppServiceStub(channel)
            try:
                logger.debug(
                    f"[{StandardEquipmentProjectCategoryClient.standardEquipmentProjectCategoriesByOrganizationId.__qualname__}] - grpc call to retrieve standardEquipmentProjectCategories from server {self._server}:{self._port}"
                )
                request = StandardEquipmentProjectCategoryAppService_standardEquipmentProjectCategoriesByOrganizationIdRequest(
                    organizationId=organizationId,
                    resultFrom=resultFrom,
                    resultSize=resultSize,
                )
                [
                    request.orders.add(order_by=o["orderBy"], direction=o["direction"])
                    for o in orders
                ]
                response: StandardEquipmentProjectCategoryAppService_standardEquipmentProjectCategoriesByOrganizationIdResponse = stub.standard_equipment_project_categories_by_organization_id.with_call(
                    request,
                    metadata=(
                        ("token", self.token),
                        (
                            "opentel",
                            AppDi.instance.get(OpenTelemetry).serializedContext(
                                StandardEquipmentProjectCategoryClient.standardEquipmentProjectCategoriesByOrganizationId.__qualname__
                            ),
                        ),
                    ),
                )
                logger.debug(
                    f"[{StandardEquipmentProjectCategoryClient.standardEquipmentProjectCategoriesByOrganizationId.__qualname__}] - grpc response: {response}"
                )

                return StandardEquipmentProjectCategories(
                    standard_equipment_project_categories=[
                        self._descriptorByObject(obj=standardEquipmentProjectCategory)
                        for standardEquipmentProjectCategory in response[
                            0
                        ].standard_equipment_project_categories
                    ],
                    total_item_count=response[0].total_item_count,
                )
            except Exception as e:
                channel.unsubscribe(lambda ch: ch.close())
                raise e

    def _descriptorByObject(
        self, obj: Any
    ) -> StandardEquipmentProjectCategoryDescriptor:
        return StandardEquipmentProjectCategoryDescriptor(
            id=obj.id,
            name=obj.name,
            organization_id=obj.organization_id,
        )
