"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""


import os
from typing import List, Any

import grpc

import src.port_adapter.AppDi as AppDi
from src.port_adapter.api.rest.grpc.Client import Client
from src.port_adapter.api.rest.model.response.v1.project.maintenance.standard_procedure.operation.StandardMaintenanceProcedureOperation import (
    StandardMaintenanceProcedureOperationDescriptor,
)
from src.port_adapter.api.rest.model.response.v1.project.maintenance.standard_procedure.operation.StandardMaintenanceProcedureOperations import (
    StandardMaintenanceProcedureOperations,
)
from src.resource.logging.logger import logger
from src.resource.logging.opentelemetry.OpenTelemetry import OpenTelemetry
from src.resource.proto._generated.project.standard_maintenance_procedure_operation_app_service_pb2 import (
    StandardMaintenanceProcedureOperationAppService_standardMaintenanceProcedureOperationsResponse,
    StandardMaintenanceProcedureOperationAppService_standardMaintenanceProcedureOperationsRequest,
    StandardMaintenanceProcedureOperationAppService_standardMaintenanceProcedureOperationByIdRequest,
    StandardMaintenanceProcedureOperationAppService_standardMaintenanceProcedureOperationByIdResponse,
    StandardMaintenanceProcedureOperationAppService_newIdRequest,
    StandardMaintenanceProcedureOperationAppService_newIdResponse,
)
from src.resource.proto._generated.project.standard_maintenance_procedure_operation_app_service_pb2_grpc import (
    StandardMaintenanceProcedureOperationAppServiceStub,
)
from src.resource.proto._generated.project.standard_maintenance_procedure_operation_app_service_pb2 import (
    StandardMaintenanceProcedureOperationAppService_standardMaintenanceProcedureOperationsByStandardMaintenanceProcedureIdRequest,
)
from src.resource.proto._generated.project.standard_maintenance_procedure_operation_app_service_pb2 import (
    StandardMaintenanceProcedureOperationAppService_standardMaintenanceProcedureOperationsByStandardMaintenanceProcedureIdResponse,
)


class StandardMaintenanceProcedureOperationClient(Client):
    def __init__(self):
        self._server = os.getenv("CAFM_PROJECT_GRPC_SERVER_SERVICE", "")
        self._port = os.getenv("CAFM_PROJECT_GRPC_SERVER_SERVICE_PORT", "")

    @OpenTelemetry.grpcTraceOTel
    def newId(self) -> str:
        with grpc.insecure_channel(f"{self._server}:{self._port}") as channel:
            stub = StandardMaintenanceProcedureOperationAppServiceStub(channel)
            try:
                request = StandardMaintenanceProcedureOperationAppService_newIdRequest()
                response: StandardMaintenanceProcedureOperationAppService_newIdResponse = stub.new_id.with_call(
                    request,
                    metadata=(
                        ("token", self.token),
                        (
                            "opentel",
                            AppDi.instance.get(OpenTelemetry).serializedContext(
                                StandardMaintenanceProcedureOperationClient.newId.__qualname__
                            ),
                        ),
                    ),
                )
                logger.debug(
                    f"[{StandardMaintenanceProcedureOperationClient.newId.__qualname__}] - grpc response: {response}"
                )
                return response[0].id
            except Exception as e:
                channel.unsubscribe(lambda ch: ch.close())
                raise e

    @OpenTelemetry.grpcTraceOTel
    def standardMaintenanceProcedureOperations(
        self, resultFrom: int = 0, resultSize: int = 10, orders: List[dict] = None
    ) -> StandardMaintenanceProcedureOperations:
        orders = [] if orders is None else orders
        with grpc.insecure_channel(f"{self._server}:{self._port}") as channel:
            stub = StandardMaintenanceProcedureOperationAppServiceStub(channel)
            try:
                logger.debug(
                    f"[{StandardMaintenanceProcedureOperationClient.standardMaintenanceProcedureOperations.__qualname__}] - grpc call to retrieve standardMaintenanceProcedureOperations from server {self._server}:{self._port}"
                )
                request = StandardMaintenanceProcedureOperationAppService_standardMaintenanceProcedureOperationsRequest(
                    result_from=resultFrom, result_size=resultSize
                )
                [
                    request.orders.add(order_by=o["orderBy"], direction=o["direction"])
                    for o in orders
                ]
                response: StandardMaintenanceProcedureOperationAppService_standardMaintenanceProcedureOperationsResponse = stub.standard_maintenance_procedure_operations.with_call(
                    request,
                    metadata=(
                        ("token", self.token),
                        (
                            "opentel",
                            AppDi.instance.get(OpenTelemetry).serializedContext(
                                StandardMaintenanceProcedureOperationClient.standardMaintenanceProcedureOperations.__qualname__
                            ),
                        ),
                    ),
                )
                logger.debug(
                    f"[{StandardMaintenanceProcedureOperationClient.standardMaintenanceProcedureOperations.__qualname__}] - grpc response: {response}"
                )

                return StandardMaintenanceProcedureOperations(
                    standard_maintenance_procedure_operations=[
                        self._descriptorByObject(obj=standardMaintenanceProcedureOperation)
                        for standardMaintenanceProcedureOperation in response[
                            0
                        ].standard_maintenance_procedure_operations
                    ],
                    total_item_count=response[0].total_item_count,
                )
            except Exception as e:
                channel.unsubscribe(lambda ch: ch.close())
                raise e

    @OpenTelemetry.grpcTraceOTel
    def standardMaintenanceProcedureOperationById(
        self, id
    ) -> StandardMaintenanceProcedureOperationDescriptor:
        with grpc.insecure_channel(f"{self._server}:{self._port}") as channel:
            stub = StandardMaintenanceProcedureOperationAppServiceStub(channel)
            try:
                logger.debug(
                    f"[{StandardMaintenanceProcedureOperationClient.standardMaintenanceProcedureOperationById.__qualname__}] - grpc call to retrieve standardMaintenanceProcedureOperation with standardMaintenanceProcedureOperationId: {id} from server {self._server}:{self._port}"
                )
                response: StandardMaintenanceProcedureOperationAppService_standardMaintenanceProcedureOperationByIdResponse = stub.standard_maintenance_procedure_operation_by_id.with_call(
                    StandardMaintenanceProcedureOperationAppService_standardMaintenanceProcedureOperationByIdRequest(
                        id=id
                    ),
                    metadata=(
                        ("token", self.token),
                        (
                            "opentel",
                            AppDi.instance.get(OpenTelemetry).serializedContext(
                                StandardMaintenanceProcedureOperationClient.standardMaintenanceProcedureOperations.__qualname__
                            ),
                        ),
                    ),
                )
                logger.debug(
                    f"[{StandardMaintenanceProcedureOperationClient.standardMaintenanceProcedureOperationById.__qualname__}] - grpc response: {response}"
                )
                standardMaintenanceProcedureOperation = response[
                    0
                ].standard_maintenance_procedure_operation
                return self._descriptorByObject(obj=standardMaintenanceProcedureOperation)
            except Exception as e:
                channel.unsubscribe(lambda ch: ch.close())
                raise e

    @OpenTelemetry.grpcTraceOTel
    def standardMaintenanceProcedureOperationsByStandardMaintenanceProcedureId(
        self,
        standardMaintenanceProcedureId: str = None,
        resultFrom: int = 0,
        resultSize: int = 10,
        orders: List[dict] = None,
    ) -> StandardMaintenanceProcedureOperations:
        orders = [] if orders is None else orders
        with grpc.insecure_channel(f"{self._server}:{self._port}") as channel:
            stub = StandardMaintenanceProcedureOperationAppServiceStub(channel)
            try:
                logger.debug(
                    f"[{StandardMaintenanceProcedureOperationClient.standardMaintenanceProcedureOperations.__qualname__}] - grpc call to retrieve standardMaintenanceProcedureOperations from server {self._server}:{self._port}"
                )
                request = StandardMaintenanceProcedureOperationAppService_standardMaintenanceProcedureOperationsByStandardMaintenanceProcedureIdRequest(
                    standard_maintenance_procedure_id=standardMaintenanceProcedureId,
                    result_from=resultFrom,
                    result_size=resultSize,
                )
                [
                    request.orders.add(order_by=o["orderBy"], direction=o["direction"])
                    for o in orders
                ]
                response: StandardMaintenanceProcedureOperationAppService_standardMaintenanceProcedureOperationsByStandardMaintenanceProcedureIdResponse = stub.standard_maintenance_procedure_operations_by_standard_maintenance_procedure_id.with_call(
                    request,
                    metadata=(
                        ("token", self.token),
                        (
                            "opentel",
                            AppDi.instance.get(OpenTelemetry).serializedContext(
                                StandardMaintenanceProcedureOperationClient.standardMaintenanceProcedureOperations.__qualname__
                            ),
                        ),
                    ),
                )
                logger.debug(
                    f"[{StandardMaintenanceProcedureOperationClient.standardMaintenanceProcedureOperationsByStandardMaintenanceProcedureId.__qualname__}] - grpc response: {response}"
                )

                return StandardMaintenanceProcedureOperations(
                    standard_maintenance_procedure_operations=[
                        self._descriptorByObject(obj=standardMaintenanceProcedureOperation)
                        for standardMaintenanceProcedureOperation in response[
                            0
                        ].standard_maintenance_procedure_operations
                    ],
                    total_item_count=response[0].total_item_count,
                )
            except Exception as e:
                channel.unsubscribe(lambda ch: ch.close())
                raise e

    def _descriptorByObject(self, obj: Any) -> StandardMaintenanceProcedureOperationDescriptor:
        return StandardMaintenanceProcedureOperationDescriptor(
            id=obj.id,
            name=obj.name,
            description=obj.description,
            type=obj.type,
            standard_maintenance_procedure_id=obj.standard_maintenance_procedure_id,
        )
