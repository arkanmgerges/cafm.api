"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""



import os
from typing import List, Any

import grpc

import src.port_adapter.AppDi as AppDi
from src.port_adapter.api.rest.grpc.Client import Client
from src.port_adapter.api.rest.model.response.v1.project.equipment.Equipment import EquipmentDescriptor
from src.port_adapter.api.rest.model.response.v1.project.equipment.Equipments import Equipments
from src.resource.logging.logger import logger
from src.resource.logging.opentelemetry.OpenTelemetry import OpenTelemetry
from src.resource.proto._generated.project.equipment_app_service_pb2 import \
    EquipmentAppService_equipmentsResponse, \
    EquipmentAppService_equipmentsRequest, EquipmentAppService_equipmentByIdRequest, \
    EquipmentAppService_equipmentByIdResponse, EquipmentAppService_newIdRequest, EquipmentAppService_newIdResponse
from src.resource.proto._generated.project.equipment_app_service_pb2_grpc import EquipmentAppServiceStub


class EquipmentClient(Client):
    def __init__(self):
        self._server = os.getenv('CAFM_PROJECT_GRPC_SERVER_SERVICE', '')
        self._port = os.getenv('CAFM_PROJECT_GRPC_SERVER_SERVICE_PORT', '')

    @OpenTelemetry.grpcTraceOTel
    def newId(self) -> str:
        with grpc.insecure_channel(f'{self._server}:{self._port}') as channel:
            stub = EquipmentAppServiceStub(channel)
            try:
                request = EquipmentAppService_newIdRequest()
                response: EquipmentAppService_newIdResponse = stub.newId.with_call(
                    request,
                    metadata=(('token', self.token), (
                        'opentel', AppDi.instance.get(OpenTelemetry).serializedContext(EquipmentClient.newId.__qualname__))))
                logger.debug(
                    f'[{EquipmentClient.newId.__qualname__}] - grpc response: {response}')
                return response[0].id
            except Exception as e:
                channel.unsubscribe(lambda ch: ch.close())
                raise e

    @OpenTelemetry.grpcTraceOTel
    def equipments(self, resultFrom: int = 0, resultSize: int = 10, order: List[dict] = None) -> Equipments:
        order = [] if order is None else order
        with grpc.insecure_channel(f'{self._server}:{self._port}') as channel:
            stub = EquipmentAppServiceStub(channel)
            try:
                logger.debug(
                    f'[{EquipmentClient.equipments.__qualname__}] - grpc call to retrieve equipments from server {self._server}:{self._port}')
                request = EquipmentAppService_equipmentsRequest(resultFrom=resultFrom, resultSize=resultSize)
                [request.order.add(orderBy=o["orderBy"], direction=o["direction"]) for o in order]
                response: EquipmentAppService_equipmentsResponse = stub.equipments.with_call(
                    request,
                    metadata=(('token', self.token), (
                        'opentel',
                        AppDi.instance.get(OpenTelemetry).serializedContext(
                            EquipmentClient.equipments.__qualname__)),))
                logger.debug(
                    f'[{EquipmentClient.equipments.__qualname__}] - grpc response: {response}')

                return Equipments(equipments=[self._descriptorByObject(obj=equipment) for equipment in
                                                    response[0].equipments],
                                     item_count=response[0].itemCount)
            except Exception as e:
                channel.unsubscribe(lambda ch: ch.close())
                raise e

    @OpenTelemetry.grpcTraceOTel
    def equipmentById(self, id) -> EquipmentDescriptor:
        with grpc.insecure_channel(f'{self._server}:{self._port}') as channel:
            stub = EquipmentAppServiceStub(channel)
            try:
                logger.debug(
                    f'[{EquipmentClient.equipmentById.__qualname__}] - grpc call to retrieve equipment with equipmentId: {id} from server {self._server}:{self._port}')
                response: EquipmentAppService_equipmentByIdResponse = stub.equipmentById.with_call(
                    EquipmentAppService_equipmentByIdRequest(id=id),
                    metadata=(('token', self.token), (
                        'opentel', AppDi.instance.get(OpenTelemetry).serializedContext(
                            EquipmentClient.equipments.__qualname__))))
                logger.debug(
                    f'[{EquipmentClient.equipmentById.__qualname__}] - grpc response: {response}')
                equipment = response[0].equipment
                return self._descriptorByObject(obj=equipment)
            except Exception as e:
                channel.unsubscribe(lambda ch: ch.close())
                raise e

    def _descriptorByObject(self, obj: Any) -> EquipmentDescriptor:
        return EquipmentDescriptor(id=obj.id,
                                      name=obj.name,
                                      project_id=obj.projectId,
                                      equipment_project_category_id=obj.equipmentProjectCategoryId,
                                      equipment_category_id=obj.equipmentCategoryId,
                                      equipment_category_group_id=obj.equipmentCategoryGroupId,
                                      building_id=obj.buildingId,
                                      building_level_id=obj.buildingLevelId,
                                      building_level_room_id=obj.buildingLevelRoomId,
                                      manufacturer_id=obj.manufacturerId,
                                      equipment_model_id=obj.equipmentModelId,
                                      quantity=obj.quantity,
                                      )
