"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""



import os
from typing import List, Any

import grpc

import src.port_adapter.AppDi as AppDi
from src.port_adapter.api.rest.grpc.Client import Client
from src.port_adapter.api.rest.model.response.v1.project.equipment.category.EquipmentCategory import EquipmentCategoryDescriptor
from src.port_adapter.api.rest.model.response.v1.project.equipment.category.EquipmentCategorys import EquipmentCategorys
from src.resource.logging.logger import logger
from src.resource.logging.opentelemetry.OpenTelemetry import OpenTelemetry
from src.resource.proto._generated.project.equipment_category_app_service_pb2 import \
    EquipmentCategoryAppService_equipmentCategorysResponse, \
    EquipmentCategoryAppService_equipmentCategorysRequest, EquipmentCategoryAppService_equipmentCategoryByIdRequest, \
    EquipmentCategoryAppService_equipmentCategoryByIdResponse
from src.resource.proto._generated.project.equipment_category_app_service_pb2_grpc import EquipmentCategoryAppServiceStub


class EquipmentCategoryClient(Client):
    def __init__(self):
        self._server = os.getenv('CAFM_PROJECT_GRPC_SERVER_SERVICE', '')
        self._port = os.getenv('CAFM_PROJECT_GRPC_SERVER_SERVICE_PORT', '')

    @OpenTelemetry.grpcTraceOTel
    def equipmentCategorys(self, resultFrom: int = 0, resultSize: int = 10, order: List[dict] = None) -> EquipmentCategorys:
        order = [] if order is None else order
        with grpc.insecure_channel(f'{self._server}:{self._port}') as channel:
            stub = EquipmentCategoryAppServiceStub(channel)
            try:
                logger.debug(
                    f'[{EquipmentCategoryClient.equipmentCategorys.__qualname__}] - grpc call to retrieve equipmentCategorys from server {self._server}:{self._port}')
                request = EquipmentCategoryAppService_equipmentCategorysRequest(resultFrom=resultFrom, resultSize=resultSize)
                [request.order.add(orderBy=o["orderBy"], direction=o["direction"]) for o in order]
                response: EquipmentCategoryAppService_equipmentCategorysResponse = stub.equipmentCategorys.with_call(
                    request,
                    metadata=(('token', self.token), (
                        'opentel',
                        AppDi.instance.get(OpenTelemetry).serializedContext(
                            EquipmentCategoryClient.equipmentCategorys.__qualname__)),))
                logger.debug(
                    f'[{EquipmentCategoryClient.equipmentCategorys.__qualname__}] - grpc response: {response}')

                return EquipmentCategorys(equipment_categorys=[self._descriptorByObject(obj=equipmentCategory) for equipmentCategory in
                                                    response[0].equipmentCategorys],
                                     item_count=response[0].itemCount)
            except Exception as e:
                channel.unsubscribe(lambda ch: ch.close())
                raise e

    @OpenTelemetry.grpcTraceOTel
    def equipmentCategoryById(self, id) -> EquipmentCategoryDescriptor:
        with grpc.insecure_channel(f'{self._server}:{self._port}') as channel:
            stub = EquipmentCategoryAppServiceStub(channel)
            try:
                logger.debug(
                    f'[{EquipmentCategoryClient.equipmentCategoryById.__qualname__}] - grpc call to retrieve equipmentCategory with equipmentCategoryId: {id} from server {self._server}:{self._port}')
                response: EquipmentCategoryAppService_equipmentCategoryByIdResponse = stub.equipmentCategoryById.with_call(
                    EquipmentCategoryAppService_equipmentCategoryByIdRequest(id=id),
                    metadata=(('token', self.token), (
                        'opentel', AppDi.instance.get(OpenTelemetry).serializedContext(
                            EquipmentCategoryClient.equipmentCategorys.__qualname__))))
                logger.debug(
                    f'[{EquipmentCategoryClient.equipmentCategoryById.__qualname__}] - grpc response: {response}')
                equipmentCategory = response[0].equipmentCategory
                return self._descriptorByObject(obj=equipmentCategory)
            except Exception as e:
                channel.unsubscribe(lambda ch: ch.close())
                raise e

    def _descriptorByObject(self, obj: Any) -> EquipmentCategoryDescriptor:
        return EquipmentCategoryDescriptor(id=obj.id,
                                      name=obj.name,
                                      )
