"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""


import os
from typing import List, Any

import grpc

import src.port_adapter.AppDi as AppDi
from src.port_adapter.api.rest.grpc.Client import Client
from src.port_adapter.api.rest.model.response.v1.project.equipment.model.EquipmentModel import (
    EquipmentModelDescriptor,
)
from src.port_adapter.api.rest.model.response.v1.project.equipment.model.EquipmentModels import (
    EquipmentModels,
)
from src.resource.logging.logger import logger
from src.resource.logging.opentelemetry.OpenTelemetry import OpenTelemetry
from src.resource.proto._generated.project.equipment_model_app_service_pb2 import (
    EquipmentModelAppService_equipmentModelsResponse,
    EquipmentModelAppService_equipmentModelsRequest,
    EquipmentModelAppService_equipmentModelByIdRequest,
    EquipmentModelAppService_equipmentModelByIdResponse,
    EquipmentModelAppService_newIdRequest,
    EquipmentModelAppService_newIdResponse,
)
from src.resource.proto._generated.project.equipment_model_app_service_pb2_grpc import (
    EquipmentModelAppServiceStub,
)


class EquipmentModelClient(Client):
    def __init__(self):
        self._server = os.getenv("CAFM_PROJECT_GRPC_SERVER_SERVICE", "")
        self._port = os.getenv("CAFM_PROJECT_GRPC_SERVER_SERVICE_PORT", "")

    @OpenTelemetry.grpcTraceOTel
    def newId(self) -> str:
        with grpc.insecure_channel(f"{self._server}:{self._port}") as channel:
            stub = EquipmentModelAppServiceStub(channel)
            try:
                request = EquipmentModelAppService_newIdRequest()
                response: EquipmentModelAppService_newIdResponse = stub.new_id.with_call(
                    request,
                    metadata=(
                        ("token", self.token),
                        (
                            "opentel",
                            AppDi.instance.get(OpenTelemetry).serializedContext(
                                EquipmentModelClient.newId.__qualname__
                            ),
                        ),
                    ),
                )
                logger.debug(
                    f"[{EquipmentModelClient.newId.__qualname__}] - grpc response: {response}"
                )
                return response[0].id
            except Exception as e:
                channel.unsubscribe(lambda ch: ch.close())
                raise e

    @OpenTelemetry.grpcTraceOTel
    def equipmentModels(
        self, resultFrom: int = 0, resultSize: int = 10, orders: List[dict] = None
    ) -> EquipmentModels:
        orders = [] if orders is None else orders
        with grpc.insecure_channel(f"{self._server}:{self._port}") as channel:
            stub = EquipmentModelAppServiceStub(channel)
            try:
                logger.debug(
                    f"[{EquipmentModelClient.equipmentModels.__qualname__}] - grpc call to retrieve equipmentModels from server {self._server}:{self._port}"
                )
                request = EquipmentModelAppService_equipmentModelsRequest(
                    result_from=resultFrom, result_size=resultSize
                )
                [
                    request.orders.add(order_by=o["orderBy"], direction=o["direction"])
                    for o in orders
                ]
                response: EquipmentModelAppService_equipmentModelsResponse = (
                    stub.equipment_models.with_call(
                        request,
                        metadata=(
                            ("token", self.token),
                            (
                                "opentel",
                                AppDi.instance.get(OpenTelemetry).serializedContext(
                                    EquipmentModelClient.equipmentModels.__qualname__
                                ),
                            ),
                        ),
                    )
                )
                logger.debug(
                    f"[{EquipmentModelClient.equipmentModels.__qualname__}] - grpc response: {response}"
                )

                return EquipmentModels(
                    equipment_models=[
                        self._descriptorByObject(obj=equipmentModel)
                        for equipmentModel in response[0].equipment_models
                    ],
                    total_item_count=response[0].total_item_count,
                )
            except Exception as e:
                channel.unsubscribe(lambda ch: ch.close())
                raise e

    @OpenTelemetry.grpcTraceOTel
    def equipmentModelById(self, id) -> EquipmentModelDescriptor:
        with grpc.insecure_channel(f"{self._server}:{self._port}") as channel:
            stub = EquipmentModelAppServiceStub(channel)
            try:
                logger.debug(
                    f"[{EquipmentModelClient.equipmentModelById.__qualname__}] - grpc call to retrieve equipmentModel with equipmentModelId: {id} from server {self._server}:{self._port}"
                )
                response: EquipmentModelAppService_equipmentModelByIdResponse = (
                    stub.equipment_model_by_id.with_call(
                        EquipmentModelAppService_equipmentModelByIdRequest(id=id),
                        metadata=(
                            ("token", self.token),
                            (
                                "opentel",
                                AppDi.instance.get(OpenTelemetry).serializedContext(
                                    EquipmentModelClient.equipmentModels.__qualname__
                                ),
                            ),
                        ),
                    )
                )
                logger.debug(
                    f"[{EquipmentModelClient.equipmentModelById.__qualname__}] - grpc response: {response}"
                )
                equipmentModel = response[0].equipment_model
                return self._descriptorByObject(obj=equipmentModel)
            except Exception as e:
                channel.unsubscribe(lambda ch: ch.close())
                raise e

    def _descriptorByObject(self, obj: Any) -> EquipmentModelDescriptor:
        return EquipmentModelDescriptor(
            id=obj.id,
            name=obj.name,
        )
