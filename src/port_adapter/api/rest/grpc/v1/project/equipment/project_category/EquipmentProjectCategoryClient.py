"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""

import os
from typing import List, Any

import grpc

import src.port_adapter.AppDi as AppDi
from src.port_adapter.api.rest.grpc.Client import Client
from src.port_adapter.api.rest.model.response.v1.project.equipment.category.group.EquipmentCategoryGroup import \
    EquipmentCategoryGroupDescriptor
from src.port_adapter.api.rest.model.response.v1.project.equipment.project_category.EquipmentProjectCategory import \
    EquipmentProjectCategoryDescriptor
from src.port_adapter.api.rest.model.response.v1.project.equipment.project_category.EquipmentProjectCategorys import \
    EquipmentProjectCategorys
from src.port_adapter.api.rest.model.response.v1.project.equipment.category.group.EquipmentCategoryGroups import \
    EquipmentCategoryGroups
from src.resource.logging.logger import logger
from src.resource.logging.opentelemetry.OpenTelemetry import OpenTelemetry
from src.resource.proto._generated.project.equipment_project_category_app_service_pb2 import \
    EquipmentProjectCategoryAppService_equipmentProjectCategorysResponse, \
    EquipmentProjectCategoryAppService_equipmentProjectCategorysRequest, \
    EquipmentProjectCategoryAppService_equipmentProjectCategoryByIdRequest, \
    EquipmentProjectCategoryAppService_equipmentProjectCategoryByIdResponse, \
    EquipmentProjectCategoryAppService_equipmentCategoryGroupsByProjectCategoryIdRequest, \
    EquipmentProjectCategoryAppService_equipmentCategoryGroupsByProjectCategoryIdResponse
from src.resource.proto._generated.project.equipment_project_category_app_service_pb2_grpc import \
    EquipmentProjectCategoryAppServiceStub


class EquipmentProjectCategoryClient(Client):
    def __init__(self):
        self._server = os.getenv('CAFM_PROJECT_GRPC_SERVER_SERVICE', '')
        self._port = os.getenv('CAFM_PROJECT_GRPC_SERVER_SERVICE_PORT', '')

    @OpenTelemetry.grpcTraceOTel
    def equipmentProjectCategorys(self, resultFrom: int = 0, resultSize: int = 10,
                                  order: List[dict] = None) -> EquipmentProjectCategorys:
        order = [] if order is None else order
        with grpc.insecure_channel(f'{self._server}:{self._port}') as channel:
            stub = EquipmentProjectCategoryAppServiceStub(channel)
            try:
                logger.debug(
                    f'[{EquipmentProjectCategoryClient.equipmentProjectCategorys.__qualname__}] - grpc call to retrieve equipmentProjectCategorys from server {self._server}:{self._port}')
                request = EquipmentProjectCategoryAppService_equipmentProjectCategorysRequest(resultFrom=resultFrom,
                                                                                              resultSize=resultSize)
                [request.order.add(orderBy=o["orderBy"], direction=o["direction"]) for o in order]
                response: EquipmentProjectCategoryAppService_equipmentProjectCategorysResponse = stub.equipmentProjectCategorys.with_call(
                    request,
                    metadata=(('token', self.token), (
                        'opentel',
                        AppDi.instance.get(OpenTelemetry).serializedContext(
                            EquipmentProjectCategoryClient.equipmentProjectCategorys.__qualname__)),))
                logger.debug(
                    f'[{EquipmentProjectCategoryClient.equipmentProjectCategorys.__qualname__}] - grpc response: {response}')

                return EquipmentProjectCategorys(
                    equipment_project_categorys=[self._descriptorByObject(obj=equipmentProjectCategory) for
                                                 equipmentProjectCategory in
                                                 response[0].equipmentProjectCategorys],
                    item_count=response[0].itemCount)
            except Exception as e:
                channel.unsubscribe(lambda ch: ch.close())
                raise e

    @OpenTelemetry.grpcTraceOTel
    def equipmentProjectCategoryById(self, id) -> EquipmentProjectCategoryDescriptor:
        with grpc.insecure_channel(f'{self._server}:{self._port}') as channel:
            stub = EquipmentProjectCategoryAppServiceStub(channel)
            try:
                logger.debug(
                    f'[{EquipmentProjectCategoryClient.equipmentProjectCategoryById.__qualname__}] - grpc call to retrieve equipmentProjectCategory with equipmentProjectCategoryId: {id} from server {self._server}:{self._port}')
                response: EquipmentProjectCategoryAppService_equipmentProjectCategoryByIdResponse = stub.equipmentProjectCategoryById.with_call(
                    EquipmentProjectCategoryAppService_equipmentProjectCategoryByIdRequest(id=id),
                    metadata=(('token', self.token), (
                        'opentel', AppDi.instance.get(OpenTelemetry).serializedContext(
                            EquipmentProjectCategoryClient.equipmentProjectCategorys.__qualname__))))
                logger.debug(
                    f'[{EquipmentProjectCategoryClient.equipmentProjectCategoryById.__qualname__}] - grpc response: {response}')
                equipmentProjectCategory = response[0].equipmentProjectCategory
                return self._descriptorByObject(obj=equipmentProjectCategory)
            except Exception as e:
                channel.unsubscribe(lambda ch: ch.close())
                raise e

    def _descriptorByObject(self, obj: Any) -> EquipmentProjectCategoryDescriptor:
        return EquipmentProjectCategoryDescriptor(id=obj.id,
                                                  name=obj.name,
                                                  )

    def categoryGroupsByProjectCategoryId(self, id: str, resultFrom: int = 0, resultSize: int = 10,
                                          order: List[dict] = None) -> EquipmentCategoryGroups:
        order = [] if order is None else order
        with grpc.insecure_channel(f'{self._server}:{self._port}') as channel:
            stub = EquipmentProjectCategoryAppServiceStub(channel)
            try:
                logger.debug(
                    f'[{EquipmentProjectCategoryClient.categoryGroupsByProjectCategoryId.__qualname__}] - grpc call to retrieve equipmentProjectCategorys from server {self._server}:{self._port}')
                request = EquipmentProjectCategoryAppService_equipmentCategoryGroupsByProjectCategoryIdRequest(id=id,
                                                                                                               resultFrom=resultFrom,
                                                                                                               resultSize=resultSize)
                [request.order.add(orderBy=o["orderBy"], direction=o["direction"]) for o in order]
                response: EquipmentProjectCategoryAppService_equipmentCategoryGroupsByProjectCategoryIdResponse = stub.equipmentCategoryGroupsByProjectCategoryId.with_call(
                    request,
                    metadata=(('token', self.token), (
                        'opentel',
                        AppDi.instance.get(OpenTelemetry).serializedContext(
                            EquipmentProjectCategoryClient.categoryGroupsByProjectCategoryId.__qualname__)),))
                logger.debug(
                    f'[{EquipmentProjectCategoryClient.categoryGroupsByProjectCategoryId.__qualname__}] - grpc response: {response}')

                return EquipmentCategoryGroups(
                    equipment_category_groups=[EquipmentCategoryGroupDescriptor(id=group.id,
                                                                                name=group.name,
                                                                                equipment_category_id=group.equipmentCategoryId, )
                                               for
                                               group in
                                               response[0].equipmentCategoryGroups],
                    item_count=response[0].itemCount)
            except Exception as e:
                channel.unsubscribe(lambda ch: ch.close())
                raise e
