{% extends "./grpc/model.jinja2" %}
{%set className= model.name | upperCamelCase%}
{%-set lowerCamelModelName= model.name | lowerCamelCase-%}
{%-set funcParams= model.field | mapFuncParams-%}
{%-set funcArgs= model.field | mapFuncArgs-%}
{%-set funcArgsByObjDict= model.field | mapFuncArgs('obj', 'function', ':')-%}
{%-set funcArgsByDict= model.field | mapFuncArgs('dataDict', 'dictionary')-%}
{%-set funcArgsByDbObj= model.field | mapFuncArgs('dbObject')-%}
{%-set funcArgsByItem= model.field | mapFuncArgs('x')-%}
{%-set classNameWords= model.name | spacedWords%}
{%-set filePath= model.path | replace('/', '.')%}
{%-block segmentImport %}
{%- for segmentItem in segment %}
    {%- if model.name == segmentItem.name %}
      {%- if 'foreign' in segmentItem %}
      {%-set foreignModelName = segmentItem.foreign.model.name | upperCamelCase%}
      {%-set lowerForeignModelName = segmentItem.foreign.model.name | lowerCamelCase%}
from src.resource.proto._generated.{{model.microservice}}.{{model.name}}_app_service_pb2 import {{className}}AppService_{{ lowerCamelModelName }}sBy{{foreignModelName}}IdRequest
from src.resource.proto._generated.{{model.microservice}}.{{model.name}}_app_service_pb2 import {{className}}AppService_{{ lowerCamelModelName }}sBy{{foreignModelName}}IdResponse
      {%- endif %}
    {%- endif %}
  {%- endfor %}
{%-endblock%}
{%-block modelByForeignModelId %}
  {%- for segmentItem in segment %}
    {%- if model.name == segmentItem.name %}
      {%- if 'foreign' in segmentItem %}
      {%-set foreignModelName = segmentItem.foreign.model.name | upperCamelCase%}
      {%-set lowerForeignModelName = segmentItem.foreign.model.name | lowerCamelCase%}

    @OpenTelemetry.grpcTraceOTel
    def {{ lowerCamelModelName }}sBy{{foreignModelName}}Id(self, {{lowerForeignModelName}}Id: str = None, resultFrom: int = 0, resultSize: int = 10, order: List[dict] = None) -> {{ className }}s:
        order = [] if order is None else order
        with grpc.insecure_channel(f'{self._server}:{self._port}') as channel:
            stub = {{ className }}AppServiceStub(channel)
            try:
                logger.debug(
                    f'[{{ '{' }}{{ className }}Client.{{ lowerCamelModelName }}s.__qualname__}] - grpc call to retrieve {{ lowerCamelModelName }}s from server {self._server}:{self._port}')
                request = {{ className }}AppService_{{ lowerCamelModelName }}sBy{{foreignModelName}}IdRequest({{lowerForeignModelName}}Id={{lowerForeignModelName}}Id, resultFrom=resultFrom, resultSize=resultSize)
                [request.order.add(orderBy=o["orderBy"], direction=o["direction"]) for o in order]
                response: {{ className }}AppService_{{ lowerCamelModelName }}sBy{{foreignModelName}}IdResponse = stub.{{ lowerCamelModelName }}sBy{{foreignModelName}}Id.with_call(
                    request,
                    metadata=(('token', self.token), (
                        'opentel',
                        AppDi.instance.get(OpenTelemetry).serializedContext(
                            {{ className }}Client.{{ lowerCamelModelName }}s.__qualname__)),))
                logger.debug(
                    f'[{{ '{' }}{{ className }}Client.{{ lowerCamelModelName }}sBy{{foreignModelName}}Id.__qualname__}] - grpc response: {response}')

                return {{ className }}s({{ model.name }}s=[self._descriptorByObject(obj={{ lowerCamelModelName }}) for {{ lowerCamelModelName }} in
                                                    response[0].{{ lowerCamelModelName }}s],
                                     item_count=response[0].itemCount)
            except Exception as e:
                channel.unsubscribe(lambda ch: ch.close())
                raise e
      {%- endif %}
    {%- endif %}
  {%- endfor %}
{%-endblock%}