"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""
{%set className= model.name | upperCamelCase-%}
{%-set lowerCamelModelName= model.name | lowerCamelCase-%}
{%-set funcParams= model.field | mapFuncParams-%}
{%-set funcArgs= model.field | mapFuncArgs-%}
{%-set funcArgsLowerCase= model.field | mapFuncArgsLowerCase-%}
{%-set funcArgsByObj= model.field | mapFuncArgs('obj', 'function')-%}
{%-set funcArgsByObjLowerCase= model.field | mapFuncArgsLowerCase('obj', 'function')-%}
{%-set funcArgsByDbObj= model.field | mapFuncArgs('dbObject')-%}
{%-set funcArgsByDbObjLowerCase= model.field | mapFuncArgsLowerCase('dbObject')-%}
{%-set funcArgsByItem= model.field | mapFuncArgs('x')-%}
{%-set funcArgsByItemLowerCase= model.field | mapFuncArgsLowerCase('x')-%}
{%-set classNameWords= model.name | spacedWords-%}
{%-set filePath= model.path | replace('/', '.')%}


import os
from typing import List, Any

import grpc

import src.port_adapter.AppDi as AppDi
from src.port_adapter.api.rest.grpc.Client import Client
from src.port_adapter.api.rest.model.response.v1.{{ filePath }}.{{ className }} import {{ className }}Descriptor
from src.port_adapter.api.rest.model.response.v1.{{ filePath }}.{{ className | pluralize }} import {{ className | pluralize }}
from src.resource.logging.logger import logger
from src.resource.logging.opentelemetry.OpenTelemetry import OpenTelemetry
from src.resource.proto._generated.{{ model.microservice }}.{{ model.name }}_app_service_pb2 import \
    {{ className }}AppService_{{ lowerCamelModelName | pluralize }}Response, \
    {{ className }}AppService_{{ lowerCamelModelName | pluralize }}Request, {{ className }}AppService_{{ lowerCamelModelName }}ByIdRequest, \
    {{ className }}AppService_{{ lowerCamelModelName }}ByIdResponse
from src.resource.proto._generated.{{ model.microservice }}.{{ model.name }}_app_service_pb2_grpc import {{ className }}AppServiceStub
{%-block segmentImport %}{%-endblock%}

class {{ className }}Client(Client):
    def __init__(self):
        self._server = os.getenv('CAFM_PROJECT_GRPC_SERVER_SERVICE', '')
        self._port = os.getenv('CAFM_PROJECT_GRPC_SERVER_SERVICE_PORT', '')

    @OpenTelemetry.grpcTraceOTel
    def {{ lowerCamelModelName | pluralize }}(self, resultFrom: int = 0, resultSize: int = 10, order: List[dict] = None) -> {{ className | pluralize }}:
        order = [] if order is None else order
        with grpc.insecure_channel(f'{self._server}:{self._port}') as channel:
            stub = {{ className }}AppServiceStub(channel)
            try:
                logger.debug(
                    f'[{{ '{' }}{{ className }}Client.{{ lowerCamelModelName | pluralize }}.__qualname__}] - grpc call to retrieve {{ lowerCamelModelName | pluralize }} from server {self._server}:{self._port}')
                request = {{ className }}AppService_{{ lowerCamelModelName | pluralize }}Request(resultFrom=resultFrom, resultSize=resultSize)
                [request.order.add(orderBy=o["orderBy"], direction=o["direction"]) for o in order]
                response: {{ className }}AppService_{{ lowerCamelModelName | pluralize }}Response = stub.{{ lowerCamelModelName | pluralize }}.with_call(
                    request,
                    metadata=(('token', self.token), (
                        'opentel',
                        AppDi.instance.get(OpenTelemetry).serializedContext(
                            {{ className }}Client.{{ lowerCamelModelName | pluralize }}.__qualname__)),))
                logger.debug(
                    f'[{{ '{' }}{{ className }}Client.{{ lowerCamelModelName | pluralize }}.__qualname__}] - grpc response: {response}')

                return {{ className | pluralize }}({{ model.name | pluralize }}=[self._descriptorByObject(obj={{ lowerCamelModelName }}) for {{ lowerCamelModelName }} in
                                                    response[0].{{ lowerCamelModelName | pluralize }}],
                                     item_count=response[0].itemCount)
            except Exception as e:
                channel.unsubscribe(lambda ch: ch.close())
                raise e

    @OpenTelemetry.grpcTraceOTel
    def {{ lowerCamelModelName }}ById(self, id) -> {{ className }}Descriptor:
        with grpc.insecure_channel(f'{self._server}:{self._port}') as channel:
            stub = {{ className }}AppServiceStub(channel)
            try:
                logger.debug(
                    f'[{{ '{' }}{{ className }}Client.{{ lowerCamelModelName }}ById.__qualname__}] - grpc call to retrieve {{ lowerCamelModelName }} with {{ lowerCamelModelName }}Id: {id} from server {self._server}:{self._port}')
                response: {{ className }}AppService_{{ lowerCamelModelName }}ByIdResponse = stub.{{ lowerCamelModelName }}ById.with_call(
                    {{ className }}AppService_{{ lowerCamelModelName }}ByIdRequest(id=id),
                    metadata=(('token', self.token), (
                        'opentel', AppDi.instance.get(OpenTelemetry).serializedContext(
                            {{ className }}Client.{{ lowerCamelModelName }}ById.__qualname__))))
                logger.debug(
                    f'[{{ '{' }}{{ className }}Client.{{ lowerCamelModelName }}ById.__qualname__}] - grpc response: {response}')
                {{ lowerCamelModelName }} = response[0].{{ lowerCamelModelName }}
                return self._descriptorByObject(obj={{ lowerCamelModelName }})
            except Exception as e:
                channel.unsubscribe(lambda ch: ch.close())
                raise e

    {%-block modelByForeignModelId %}{%-endblock%}

    def _descriptorByObject(self, obj: Any) -> {{ className }}Descriptor:
        return {{ className }}Descriptor(id=obj.id,
                                      {%- for field in model.field %}
                                      {{ field.name }}=obj.{{ field.name | lowerCamelCase }},
                                      {%- endfor %}
                                      )
