{% extends "./router/model.jinja2" %}
{%set className= model.name | upperCamelCase%}
{%-set lowerCamelModelName= model.name | lowerCamelCase-%}
{%-set funcParams= model.field | mapFuncParams-%}
{%-set funcArgs= model.field | mapFuncArgs-%}
{%-set funcArgsByObjDict= model.field | mapFuncArgs('obj', 'function', ':')-%}
{%-set funcArgsByDict= model.field | mapFuncArgs('dataDict', 'dictionary')-%}
{%-set funcArgsByDbObj= model.field | mapFuncArgs('dbObject')-%}
{%-set funcArgsByItem= model.field | mapFuncArgs('x')-%}
{%-set classNameWords= model.name | spacedWords%}
{%-set filePath= model.path | replace('/', '.')%}
{%-block segmentImport %}
{%- for segmentItem in segment %}
    {%- if model.name == segmentItem.name %}
      {%- if 'foreign' in segmentItem %}
      {%-set foreignModelName = segmentItem.foreign.model.name | upperCamelCase%}
      {%-set lowerForeignModelName = segmentItem.foreign.model.name | lowerCamelCase%}
from src.resource.proto._generated.{{model.microservice}}.{{model.name}}_app_service_pb2 import {{className}}AppService_{{ lowerCamelModelName | pluralize }}By{{foreignModelName}}IdRequest
from src.resource.proto._generated.{{model.microservice}}.{{model.name}}_app_service_pb2 import {{className}}AppService_{{ lowerCamelModelName | pluralize }}By{{foreignModelName}}IdResponse
      {%- endif %}
    {%- endif %}
  {%- endfor %}
{%-endblock%}
{%-block modelByForeignModelId %}
  {%- for segmentItem in segment %}
    {%- if model.name == segmentItem.name %}
      {%- if 'foreign' in segmentItem %}
      {%-set foreignModelName = segmentItem.foreign.model.name | upperCamelCase%}
      {%-set lowerForeignModelName = segmentItem.foreign.model.name | lowerCamelCase%}

@router.get(path="/by_{{segmentItem.foreign.model.name}}_id/{{'{'}}{{segmentItem.foreign.model.name}}_id}", summary='Get all {{ model.name | spacedWords }} by {{segmentItem.foreign.model.name | spacedWords}} id', response_model={{ className | pluralize }})
@OpenTelemetry.fastApiTraceOTel
async def get{{ className | pluralize }}By{{foreignModelName}}Id(*,
                            {{segmentItem.foreign.model.name}}_id: str = Path(..., description='{{segmentItem.foreign.model.name | spacedWords}} id that is used to fetch {{ model.name | spacedWords }} data'),
                            result_from: int = Query(0, description='Starting offset for fetching data'),
                            result_size: int = Query(10, description='Item count to be fetched'),
                            orders: str = Query('', description='e.g. id:asc,email:desc'),
                            _=Depends(CustomHttpBearer())):
    try:
        client = {{ className }}Client()
        orderService = AppDi.instance.get(OrderService)
        order = orderService.orderStringToListOfDict(order)
        return client.{{ lowerCamelModelName | pluralize }}By{{foreignModelName}}Id({{lowerForeignModelName}}Id={{segmentItem.foreign.model.name}}_id, resultFrom=result_from, resultSize=result_size, order=order)
    except grpc.RpcError as e:
        if e.code() == StatusCode.PERMISSION_DENIED:
            return Response(content=str(e), status_code=HTTP_403_FORBIDDEN)
        if e.code() == StatusCode.NOT_FOUND:
            return Response(content=str(e), status_code=HTTP_404_NOT_FOUND)
        else:
            logger.error(
                f'[{get{{ className | pluralize }}By{{foreignModelName}}Id.__module__}.{get{{ className | pluralize }}By{{foreignModelName}}Id.__qualname__}] - error response e: {e}')
            return Response(content=str(e), status_code=HTTP_500_INTERNAL_SERVER_ERROR)
    except Exception as e:
        logger.info(e)
      {%- endif %}
    {%- endif %}
  {%- endfor %}
{%-endblock%}