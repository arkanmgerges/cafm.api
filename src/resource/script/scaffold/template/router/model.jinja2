"""
The file is generated by a scaffold script
@author: Arkan M. Gerges<arkan.m.gerges@gmail.com>
"""
{%set className= model.name | upperCamelCase-%}
{%-set lowerCamelModelName= model.name | lowerCamelCase-%}
{%-set funcParams= model.field | mapFuncParams-%}
{%-set funcArgs= model.field | mapFuncArgs-%}
{%-set funcArgsLowerCase= model.field | mapFuncArgsLowerCase-%}
{%-set funcArgsByObj= model.field | mapFuncArgs('obj', 'function')-%}
{%-set funcArgsByObjLowerCase= model.field | mapFuncArgsLowerCase('obj', 'function')-%}
{%-set funcArgsByDbObj= model.field | mapFuncArgs('dbObject')-%}
{%-set funcArgsByDbObjLowerCase= model.field | mapFuncArgsLowerCase('dbObject')-%}
{%-set funcArgsByItem= model.field | mapFuncArgs('x')-%}
{%-set funcArgsByItemLowerCase= model.field | mapFuncArgsLowerCase('x')-%}
{%-set classNameWords= model.name | spacedWords-%}
{%-set filePath= model.path | replace('/', '.')%}
import json
from uuid import uuid4

import grpc
from fastapi import APIRouter, Depends, Query, Body
from fastapi import Response
from fastapi.params import Path
from grpc.beta.interfaces import StatusCode
from starlette import status
from starlette.status import HTTP_404_NOT_FOUND, HTTP_500_INTERNAL_SERVER_ERROR, HTTP_403_FORBIDDEN

import src.port_adapter.AppDi as AppDi
from src.domain_model.OrderService import OrderService
from src.port_adapter.api.rest.grpc.Client import Client
from src.port_adapter.api.rest.grpc.v1.{{ filePath }}.{{ className }}Client import {{ className }}Client
from src.port_adapter.api.rest.model.response.v1.{{ filePath }}.{{ className | pluralize }} import {{ className | pluralize }}
from src.port_adapter.api.rest.model.response.v1.{{ filePath }}.{{ className }} import {{ className }}Descriptor
from src.port_adapter.api.rest.router.v1.identity.auth import CustomHttpBearer
from src.port_adapter.messaging.common.SimpleProducer import SimpleProducer
from src.port_adapter.messaging.common.model.CommandConstant import CommandConstant
from src.resource.logging.logger import logger
from src.resource.logging.opentelemetry.OpenTelemetry import OpenTelemetry

router = APIRouter()


@router.get(path="", summary='Get all {{ model.name | spacedWords }}(s)', response_model={{ className | pluralize }})
@OpenTelemetry.fastApiTraceOTel
async def get{{ className | pluralize }}(*,
                            result_from: int = Query(0, description='Starting offset for fetching data'),
                            result_size: int = Query(10, description='Item count to be fetched'),
                            order: str = Query('', description='e.g. id:asc,email:desc'),
                            _=Depends(CustomHttpBearer())):
    try:
        client = {{ className }}Client()
        orderService = AppDi.instance.get(OrderService)
        order = orderService.orderStringToListOfDict(order)
        return client.{{ lowerCamelModelName | pluralize }}(resultFrom=result_from, resultSize=result_size, order=order)
    except grpc.RpcError as e:
        if e.code() == StatusCode.PERMISSION_DENIED:
            return Response(content=str(e), status_code=HTTP_403_FORBIDDEN)
        if e.code() == StatusCode.NOT_FOUND:
            return Response(content=str(e), status_code=HTTP_404_NOT_FOUND)
        else:
            logger.error(
                f'[{get{{ className | pluralize }}.__module__}.{get{{ className | pluralize }}.__qualname__}] - error response e: {e}')
            return Response(content=str(e), status_code=HTTP_500_INTERNAL_SERVER_ERROR)
    except Exception as e:
        logger.info(e)

{%-block modelByForeignModelId %}{%-endblock%}

@router.get(path="/{{ '{' }}{{ model.name }}_id}", summary='Get {{ model.name | spacedWords }} by id',
            response_model={{ className }}Descriptor)
@OpenTelemetry.fastApiTraceOTel
async def get{{ className }}ById(*, {{ model.name }}_id: str = Path(...,
                                                                description='{{ model.name | spacedWords }} id that is used to fetch {{ model.name | spacedWords }} data'),
                               _=Depends(CustomHttpBearer())):
    """Get a {{ model.name | spacedWords }} by id
    """
    try:
        client = {{ className }}Client()
        return client.{{ lowerCamelModelName }}ById(id={{ model.name }}_id)
    except grpc.RpcError as e:
        if e.code() == StatusCode.PERMISSION_DENIED:
            return Response(content=str(e), status_code=HTTP_403_FORBIDDEN)
        if e.code() == StatusCode.NOT_FOUND:
            return Response(content=str(e), status_code=HTTP_404_NOT_FOUND)
        else:
            logger.error(
                f'[{get{{ className }}ById.__module__}.{get{{ className }}ById.__qualname__}] - error response e: {e}')
            return Response(content=str(e), status_code=HTTP_500_INTERNAL_SERVER_ERROR)
    except Exception as e:
        logger.info(e)


@router.post("", summary='Create {{ model.name | spacedWords }}', status_code=status.HTTP_200_OK)
@OpenTelemetry.fastApiTraceOTel
async def create{{ className }}(*, _=Depends(CustomHttpBearer()),
                {%- for field in model.field %}
                 {{ field.name }}: {{ field.type }} = Body(..., description='{{ field.name | spacedWords }} of {{ model.name | spacedWords }}', embed=True),
                {%- endfor %}
                ):
    reqId = str(uuid4())
    producer = AppDi.instance.get(SimpleProducer)
    from src.port_adapter.messaging.common.model.{{ model.message_command }} import {{ model.message_command }}
    client = {{ className }}Client()
    producer.produce(obj={{ model.message_command }}(id=reqId, name=CommandConstant.CREATE_{{ model.name | upper }}.value,
                                        metadata=json.dumps({"token": Client.token}),
                                        data=json.dumps(
                                            {
                                             '{{ model.name }}_id': client.newId(),
                                            {%- for field in model.field %}
                                             '{{ field.name }}': {{ field.name }},
                                             {%- endfor %}
                                             }),
                                        external=[]),
                     schema={{ model.message_command }}.get_schema())
    return {"request_id": reqId}


@router.put("/{{ '{' }}{{ model.name }}_id}", summary='Update {{ model.name | spacedWords }}', status_code=status.HTTP_200_OK)
@OpenTelemetry.fastApiTraceOTel
async def update{{ className }}(*, _=Depends(CustomHttpBearer()),
                 {{ model.name }}_id: str = Path(..., description='{{ model.name | spacedWords }} id that is used in order to update the {{ model.name | spacedWords }}'),
                {%- for field in model.field %}
                 {{ field.name }}: {{ field.type }} = Body(..., description='{{ field.name | spacedWords }} of {{ field.name | spacedWords }}', embed=True),
                {%- endfor %}                 
                 ):
    reqId = str(uuid4())
    producer = AppDi.instance.get(SimpleProducer)
    from src.port_adapter.messaging.common.model.{{ model.message_command }} import {{ model.message_command }}
    producer.produce(obj={{ model.message_command }}(id=reqId, name=CommandConstant.UPDATE_{{ model.name | upper }}.value,
                                        metadata=json.dumps({"token": Client.token}),
                                        data=json.dumps(
                                            {'{{ model.name }}_id': {{ model.name }}_id,
                                            {%- for field in model.field %}
                                            '{{ field.name }}': {{ field.name }},
                                            {%- endfor %}
                                             }),
                                        external=[]),
                     schema={{ model.message_command }}.get_schema())
    return {"request_id": reqId}


@router.patch("/{{ '{' }}{{ model.name }}_id}", summary='Partial update {{ model.name | spacedWords }}', status_code=status.HTTP_200_OK)
@OpenTelemetry.fastApiTraceOTel
async def partialUpdate{{ className }}(*, _=Depends(CustomHttpBearer()),
                        {{ model.name }}_id: str = Path(..., description='{{ model.name | spacedWords }} id that is used in order to update the {{ model.name | spacedWords }}'),
                        {%- for field in model.field %}
                        {{ field.name }}: {{ field.type }} = Body(None, description='{{ field.name | spacedWords }} of {{ field.name | spacedWords }}', embed=True),
                        {%- endfor %}
                        ):
    reqId = str(uuid4())
    producer = AppDi.instance.get(SimpleProducer)
    from src.port_adapter.messaging.common.model.{{ model.message_command }} import {{ model.message_command }}
    producer.produce(obj={{ model.message_command }}(id=reqId, name=CommandConstant.UPDATE_{{ model.name | upper }}.value,
                                        metadata=json.dumps({"token": Client.token}),
                                        data=json.dumps(
                                            {'{{ model.name }}_id': {{ model.name }}_id,
                                            {%- for field in model.field %}
                                            '{{ field.name }}': {{ field.name }},
                                            {%- endfor %}
                                            }),
                                        external=[]),
                     schema={{ model.message_command }}.get_schema())
    return {"request_id": reqId}


@router.delete("/{{ '{' }}{{ model.name }}_id}", summary='Delete a {{ model.name | spacedWords | pluralize }}', status_code=status.HTTP_200_OK)
@OpenTelemetry.fastApiTraceOTel
async def delete{{ className }}(*, _=Depends(CustomHttpBearer()),
                 {{ model.name }}_id: str = Path(..., description='{{ model.name | spacedWords }} id that is used in order to delete the {{ model.name | spacedWords }}'), ):
    reqId = str(uuid4())
    producer = AppDi.instance.get(SimpleProducer)
    from src.port_adapter.messaging.common.model.{{ model.message_command }} import {{ model.message_command }}
    producer.produce(obj={{ model.message_command }}(id=reqId, name=CommandConstant.DELETE_{{ model.name | upper }}.value,
                                        metadata=json.dumps({"token": Client.token}),
                                        data=json.dumps(
                                            {'{{ model.name }}_id': {{ model.name }}_id}),
                                        external=[]),
                     schema={{ model.message_command }}.get_schema())
    return {"request_id": reqId}
